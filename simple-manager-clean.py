#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import json
import os
import shutil
from PIL import Image, ImageTk
import re
from datetime import datetime

class CleanCatalogManager:
    def __init__(self, root):
        self.root = root
        self.root.title("üõçÔ∏è Platforma Catalog Manager")
        self.root.geometry("1000x700")
        
        # –î–∞–Ω–Ω—ã–µ
        self.products = []
        self.selected_images = []
        self.load_products()
        
        self.setup_ui()
    
    def setup_ui(self):
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        notebook = ttk.Notebook(self.root)
        notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ 1: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏
        products_frame = ttk.Frame(notebook)
        notebook.add(products_frame, text="üì¶ –¢–æ–≤–∞—Ä—ã")
        self.setup_products_tab(products_frame)
        
        # –í–∫–ª–∞–¥–∫–∞ 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        add_frame = ttk.Frame(notebook)
        notebook.add(add_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
        self.setup_add_tab(add_frame)
        
        # –í–∫–ª–∞–¥–∫–∞ 3: –î–µ–ø–ª–æ–π
        deploy_frame = ttk.Frame(notebook)
        notebook.add(deploy_frame, text="üöÄ –î–µ–ø–ª–æ–π")
        self.setup_deploy_tab(deploy_frame)
        
    def setup_products_tab(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏"""
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        top_frame = ttk.Frame(parent)
        top_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Å–µ–∫—Ü–∏—è–º
        ttk.Label(top_frame, text="–†–∞–∑–¥–µ–ª:").pack(side=tk.LEFT, padx=(0, 5))
        self.section_var = tk.StringVar(value="all")
        section_combo = ttk.Combobox(top_frame, textvariable=self.section_var, 
                                   values=["all", "home", "nessffo"], width=10)
        section_combo.pack(side=tk.LEFT, padx=5)
        section_combo.bind('<<ComboboxSelected>>', self.filter_products)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        ttk.Button(top_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                  command=self.refresh_products_list).pack(side=tk.RIGHT, padx=5)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(parent)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        left_frame = ttk.LabelFrame(main_frame, text="üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", padding="10")
        left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))
        
        # –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        columns = ("order", "section", "title", "price", "status", "images")
        self.products_tree = ttk.Treeview(left_frame, columns=columns, show="headings", height=15)
        self.products_tree.heading("order", text="‚Ññ")
        self.products_tree.heading("section", text="–†–∞–∑–¥–µ–ª")
        self.products_tree.heading("title", text="–ù–∞–∑–≤–∞–Ω–∏–µ")
        self.products_tree.heading("price", text="–¶–µ–Ω–∞")
        self.products_tree.heading("status", text="–°—Ç–∞—Ç—É—Å")
        self.products_tree.heading("images", text="–§–æ—Ç–æ")
        
        self.products_tree.column("order", width=40)
        self.products_tree.column("section", width=80)
        self.products_tree.column("title", width=200)
        self.products_tree.column("price", width=80)
        self.products_tree.column("status", width=80)
        self.products_tree.column("images", width=60)
        
        self.products_tree.pack(fill=tk.BOTH, expand=True)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞
        scrollbar = ttk.Scrollbar(left_frame, orient=tk.VERTICAL, command=self.products_tree.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.products_tree.configure(yscrollcommand=scrollbar.set)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
        btn_frame = ttk.Frame(left_frame)
        btn_frame.pack(fill=tk.X, pady=5)
        
        ttk.Button(btn_frame, text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                  command=self.edit_product, width=15).pack(side=tk.LEFT, padx=2, fill=tk.X, expand=True)
        ttk.Button(btn_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
                  command=self.delete_product, width=15).pack(side=tk.LEFT, padx=2, fill=tk.X, expand=True)
        ttk.Button(btn_frame, text="‚¨ÜÔ∏è –í–≤–µ—Ä—Ö", 
                  command=self.move_product_up, width=10).pack(side=tk.LEFT, padx=2, fill=tk.X, expand=True)
        ttk.Button(btn_frame, text="‚¨áÔ∏è –í–Ω–∏–∑", 
                  command=self.move_product_down, width=10).pack(side=tk.LEFT, padx=2, fill=tk.X, expand=True)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞
        right_frame = ttk.LabelFrame(main_frame, text="üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞", padding="10")
        right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(5, 0))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
        info_frame = ttk.LabelFrame(right_frame, text="üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ", padding="10")
        info_frame.pack(fill=tk.X, pady=5)
        
        # –ü–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        ttk.Label(info_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ:").grid(row=0, column=0, sticky=tk.W, pady=2)
        self.edit_title_entry = ttk.Entry(info_frame, width=30)
        self.edit_title_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), pady=2, padx=(10, 0))
        
        ttk.Label(info_frame, text="–¶–µ–Ω–∞:").grid(row=1, column=0, sticky=tk.W, pady=2)
        self.edit_price_entry = ttk.Entry(info_frame, width=30)
        self.edit_price_entry.grid(row=1, column=1, sticky=(tk.W, tk.E), pady=2, padx=(10, 0))
        
        ttk.Label(info_frame, text="–û–ø–∏—Å–∞–Ω–∏–µ:").grid(row=2, column=0, sticky=tk.W, pady=2)
        self.edit_desc_entry = ttk.Entry(info_frame, width=30)
        self.edit_desc_entry.grid(row=2, column=1, sticky=(tk.W, tk.E), pady=2, padx=(10, 0))
        
        ttk.Label(info_frame, text="–ú–µ—Ç–∞:").grid(row=3, column=0, sticky=tk.W, pady=2)
        self.edit_meta_entry = ttk.Entry(info_frame, width=30)
        self.edit_meta_entry.grid(row=3, column=1, sticky=(tk.W, tk.E), pady=2, padx=(10, 0))
        
        ttk.Label(info_frame, text="–†–∞–∑–¥–µ–ª:").grid(row=4, column=0, sticky=tk.W, pady=2)
        self.edit_section_var = tk.StringVar()
        self.edit_section_combo = ttk.Combobox(info_frame, textvariable=self.edit_section_var, 
                                             values=["home", "nessffo"], width=27)
        self.edit_section_combo.grid(row=4, column=1, sticky=(tk.W, tk.E), pady=2, padx=(10, 0))
        
        ttk.Label(info_frame, text="–°—Ç–∞—Ç—É—Å:").grid(row=5, column=0, sticky=tk.W, pady=2)
        self.edit_status_var = tk.StringVar()
        self.edit_status_combo = ttk.Combobox(info_frame, textvariable=self.edit_status_var, 
                                            values=["stock", "preorder"], width=27)
        self.edit_status_combo.grid(row=5, column=1, sticky=(tk.W, tk.E), pady=2, padx=(10, 0))
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        ttk.Button(info_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", 
                  command=self.save_product_changes).grid(row=6, column=0, columnspan=2, pady=10, sticky=(tk.W, tk.E))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤
        info_frame.columnconfigure(1, weight=1)
        
        # –ì–∞–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        gallery_frame = ttk.LabelFrame(right_frame, text="üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", padding="10")
        gallery_frame.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # Canvas –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.canvas = tk.Canvas(gallery_frame, bg='white')
        scrollbar_gallery = ttk.Scrollbar(gallery_frame, orient=tk.HORIZONTAL, command=self.canvas.xview)
        self.canvas.configure(xscrollcommand=scrollbar_gallery.set)
        
        self.canvas.pack(fill=tk.BOTH, expand=True)
        scrollbar_gallery.pack(fill=tk.X)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        self.products_tree.bind('<<TreeviewSelect>>', self.on_product_select)
        
        self.refresh_products_list()
        
    def setup_add_tab(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        # –§–æ—Ä–º–∞
        form_frame = ttk.LabelFrame(parent, text="üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ", padding="10")
        form_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # –ü–æ–ª—è —Ñ–æ—Ä–º—ã
        ttk.Label(form_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ:").grid(row=0, column=0, sticky=tk.W, pady=2)
        self.title_entry = ttk.Entry(form_frame, width=50)
        self.title_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), pady=2, padx=(10, 0))
        self.title_entry.bind('<Control-v>', self.paste_text)
        
        ttk.Label(form_frame, text="–û–ø–∏—Å–∞–Ω–∏–µ:").grid(row=1, column=0, sticky=tk.W, pady=2)
        self.desc_entry = ttk.Entry(form_frame, width=50)
        self.desc_entry.grid(row=1, column=1, sticky=(tk.W, tk.E), pady=2, padx=(10, 0))
        self.desc_entry.bind('<Control-v>', self.paste_text)
        
        ttk.Label(form_frame, text="–¶–µ–Ω–∞:").grid(row=2, column=0, sticky=tk.W, pady=2)
        self.price_entry = ttk.Entry(form_frame, width=50)
        self.price_entry.grid(row=2, column=1, sticky=(tk.W, tk.E), pady=2, padx=(10, 0))
        self.price_entry.bind('<Control-v>', self.paste_text)
        
        ttk.Label(form_frame, text="–ú–µ—Ç–∞:").grid(row=3, column=0, sticky=tk.W, pady=2)
        self.meta_entry = ttk.Entry(form_frame, width=50)
        self.meta_entry.grid(row=3, column=1, sticky=(tk.W, tk.E), pady=2, padx=(10, 0))
        self.meta_entry.bind('<Control-v>', self.paste_text)
        
        ttk.Label(form_frame, text="–†–∞–∑–¥–µ–ª:").grid(row=4, column=0, sticky=tk.W, pady=2)
        self.section_entry_var = tk.StringVar(value="home")
        self.section_entry_combo = ttk.Combobox(form_frame, textvariable=self.section_entry_var, 
                                              values=["home", "nessffo"], width=47)
        self.section_entry_combo.grid(row=4, column=1, sticky=(tk.W, tk.E), pady=2, padx=(10, 0))
        
        ttk.Label(form_frame, text="–°—Ç–∞—Ç—É—Å:").grid(row=5, column=0, sticky=tk.W, pady=2)
        self.status_entry_var = tk.StringVar(value="stock")
        self.status_entry_combo = ttk.Combobox(form_frame, textvariable=self.status_entry_var, 
                                             values=["stock", "preorder"], width=47)
        self.status_entry_combo.grid(row=5, column=1, sticky=(tk.W, tk.E), pady=2, padx=(10, 0))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤
        form_frame.columnconfigure(1, weight=1)
        
        # –ü–∞–Ω–µ–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_frame = ttk.LabelFrame(parent, text="üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", padding="10")
        images_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        img_btn_frame = ttk.Frame(images_frame)
        img_btn_frame.pack(fill=tk.X, pady=5)
        
        ttk.Button(img_btn_frame, text="üì∏ –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ", 
                  command=self.select_images, width=15).pack(side=tk.LEFT, padx=5, pady=2)
        
        ttk.Button(img_btn_frame, text="‚¨ÜÔ∏è", command=self.move_image_up, width=5).pack(side=tk.LEFT, padx=2, pady=2)
        ttk.Button(img_btn_frame, text="‚¨áÔ∏è", command=self.move_image_down, width=5).pack(side=tk.LEFT, padx=2, pady=2)
        ttk.Button(img_btn_frame, text="‚ùå", command=self.remove_image, width=5).pack(side=tk.LEFT, padx=2, pady=2)
        
        # –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.images_listbox = tk.Listbox(images_frame, height=8)
        self.images_listbox.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.save_btn = ttk.Button(parent, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä", 
                                  command=self.save_product, width=25)
        self.save_btn.pack(pady=10)
    
    def load_products(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists('products.json'):
                with open('products.json', 'r', encoding='utf-8') as f:
                    self.products = json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            self.products = []
    
    def save_products(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            with open('products.json', 'w', encoding='utf-8') as f:
                json.dump(self.products, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
    
    def get_next_id(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ ID"""
        if not self.products:
            return 1
        return max(p.get('id', 0) for p in self.products) + 1
    
    def get_next_order(self, section):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ order –¥–ª—è —Å–µ–∫—Ü–∏–∏ (–≤—Å–µ–≥–¥–∞ 1 –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤)"""
        return 1
    
    def shift_orders_up(self, section):
        """–°–¥–≤–∏–≥–∞–µ—Ç –≤—Å–µ order –≤ —Å–µ–∫—Ü–∏–∏ –Ω–∞ +1"""
        section_products = [p for p in self.products if p.get('section') == section]
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ order –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–¥–≤–∏–≥–∞
        section_products.sort(key=lambda x: x.get('order', 0), reverse=True)
        for product in section_products:
            product['order'] = product.get('order', 0) + 1
    
    def shift_orders_down(self, section, deleted_order):
        """–°–¥–≤–∏–≥–∞–µ—Ç order –Ω–∞ -1 –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        section_products = [p for p in self.products if p.get('section') == section]
        for product in section_products:
            if product.get('order', 0) > deleted_order:
                product['order'] = product.get('order', 0) - 1
    
    def fix_duplicate_orders(self, section):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –¥—É–±–ª–∏ –≤ order –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞"""
        section_products = [p for p in self.products if p.get('section') == section]
        if not section_products:
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        section_products.sort(key=lambda x: x.get('created', ''), reverse=True)
        
        # –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º order
        for i, product in enumerate(section_products, 1):
            product['order'] = i
    
    def fix_duplicate_orders(self):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –¥—É–±–ª–∏ –≤ order –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤"""
        from collections import defaultdict
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
        sections = defaultdict(list)
        for product in self.products:
            section = product.get('section', 'home')
            sections[section].append(product)
        
        fixed_count = 0
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º order –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
        for section, section_products in sections.items():
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ order, –∑–∞—Ç–µ–º –ø–æ id –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            section_products.sort(key=lambda x: (x.get('order', 0), x.get('id', 0)))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏
            orders = [p.get('order', 0) for p in section_products]
            duplicates = [x for x in set(orders) if orders.count(x) > 1]
            
            if duplicates:
                # –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º order –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
                for i, product in enumerate(section_products, 1):
                    old_order = product.get('order', 0)
                    product['order'] = i
                    if old_order != i:
                        fixed_count += 1
        
        if fixed_count > 0:
            print(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count} –¥—É–±–ª–µ–π –≤ order")
        
        return fixed_count
    
    def filter_products(self, event=None):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å–µ–∫—Ü–∏–∏"""
        self.refresh_products_list()
    
    def refresh_products_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        for item in self.products_tree.get_children():
            self.products_tree.delete(item)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–µ–∫—Ü–∏–∏
        section_filter = self.section_var.get()
        filtered_products = self.products
        if section_filter != "all":
            filtered_products = [p for p in self.products if p.get('section') == section_filter]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ order
        filtered_products.sort(key=lambda x: (x.get('section', ''), x.get('order', 0)))
        
        for product in filtered_products:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            image_count = len(product.get("images", "").split("|")) if product.get("images") else 0
            
            self.products_tree.insert("", "end", values=(
                product.get("order", ""),
                product.get("section", ""),
                product.get("title", ""),
                product.get("price", ""),
                product.get("status", ""),
                f"{image_count} —Ñ–æ—Ç–æ"
            ))
    
    def on_product_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞"""
        selection = self.products_tree.selection()
        if not selection:
            return
        
        item = self.products_tree.item(selection[0])
        order = item['values'][0]
        section = item['values'][1]
        title = item['values'][2]
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä
        product = next((p for p in self.products 
                       if p.get('order') == order and p.get('section') == section 
                       and p.get('title') == title), None)
        if not product:
            return
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.edit_title_entry.delete(0, tk.END)
        self.edit_title_entry.insert(0, product.get('title', ''))
        
        self.edit_price_entry.delete(0, tk.END)
        self.edit_price_entry.insert(0, product.get('price', ''))
        
        self.edit_desc_entry.delete(0, tk.END)
        self.edit_desc_entry.insert(0, product.get('desc', ''))
        
        self.edit_meta_entry.delete(0, tk.END)
        self.edit_meta_entry.insert(0, product.get('meta', ''))
        
        self.edit_section_var.set(product.get('section', 'home'))
        self.edit_status_var.set(product.get('status', 'stock'))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.current_editing_product = product
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.show_product_images(product)
    
    def show_product_images(self, product):
        """–ü–æ–∫–∞–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞"""
        # –û—á–∏—â–∞–µ–º canvas
        self.canvas.delete("all")
        
        if not product.get('images'):
            return
        
        images = product['images'].split('|')
        x_offset = 10
        
        for i, img_name in enumerate(images):
            # –ò—â–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img_path = None
            if '/' in img_name:
                # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å
                img_path = os.path.join('img', img_name)
            else:
                # –ò—â–µ–º –≤ –ø–∞–ø–∫–µ —Ç–æ–≤–∞—Ä–∞
                folder = product.get('folder', '')
                if folder:
                    img_path = os.path.join(folder, img_name)
                else:
                    # –ò—â–µ–º –ø–æ –≤—Å–µ–º—É img
                    for root, dirs, files in os.walk('img'):
                        if img_name in files:
                            img_path = os.path.join(root, img_name)
                            break
            
            if img_path and os.path.exists(img_path):
                try:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    img = Image.open(img_path)
                    img.thumbnail((150, 150), Image.Resampling.LANCZOS)
                    photo = ImageTk.PhotoImage(img)
                    
                    # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    img_frame = tk.Frame(self.canvas, bg='white', relief=tk.RAISED, bd=2)
                    self.canvas.create_window(x_offset, 10, anchor=tk.NW, window=img_frame)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    img_label = tk.Label(img_frame, image=photo, bg='white')
                    img_label.image = photo  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
                    img_label.pack(padx=5, pady=5)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä
                    num_label = tk.Label(img_frame, text=f"{i+1}", bg='white', 
                                       font=('Arial', 12, 'bold'), fg='blue')
                    num_label.pack(pady=2)
                    
                    x_offset += 170
                    
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {img_path}: {e}")
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                placeholder_frame = tk.Frame(self.canvas, bg='lightgray', relief=tk.RAISED, bd=2)
                self.canvas.create_window(x_offset, 10, anchor=tk.NW, window=placeholder_frame)
                
                placeholder_label = tk.Label(placeholder_frame, text=f"‚ùå\n{img_name}", 
                                           bg='lightgray', font=('Arial', 8), 
                                           width=15, height=8)
                placeholder_label.pack(padx=5, pady=5)
                
                x_offset += 170
        
        # –û–±–Ω–æ–≤–ª—è–µ–º scrollregion
        self.canvas.configure(scrollregion=self.canvas.bbox("all"))
    
    def save_product_changes(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ç–æ–≤–∞—Ä–µ"""
        if not hasattr(self, 'current_editing_product') or not self.current_editing_product:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        new_title = self.edit_title_entry.get().strip()
        new_price = self.edit_price_entry.get().strip()
        new_desc = self.edit_desc_entry.get().strip()
        new_meta = self.edit_meta_entry.get().strip()
        new_section = self.edit_section_var.get()
        new_status = self.edit_status_var.get()
        
        if not new_title:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
        self.current_editing_product['title'] = new_title
        self.current_editing_product['price'] = new_price
        self.current_editing_product['desc'] = new_desc
        self.current_editing_product['meta'] = new_meta
        self.current_editing_product['section'] = new_section
        self.current_editing_product['status'] = new_status
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        self.save_products()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        self.refresh_products_list()
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"‚úÖ –¢–æ–≤–∞—Ä '{new_title}' –æ–±–Ω–æ–≤–ª–µ–Ω!")
    
    def move_product_up(self):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤–≤–µ—Ä—Ö"""
        selection = self.products_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä!")
            return
        
        item = self.products_tree.item(selection[0])
        order = item['values'][0]
        section = item['values'][1]
        title = item['values'][2]
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä
        product = next((p for p in self.products 
                       if p.get('order') == order and p.get('section') == section 
                       and p.get('title') == title), None)
        if not product:
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–æ–≤–∞—Ä –≤ —Ç–æ–π –∂–µ —Å–µ–∫—Ü–∏–∏
        section_products = [p for p in self.products if p.get('section') == section]
        section_products.sort(key=lambda x: x.get('order', 0))
        
        current_index = None
        for i, p in enumerate(section_products):
            if p.get('id') == product.get('id'):
                current_index = i
                break
        
        if current_index is None or current_index == 0:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–¢–æ–≤–∞—Ä —É–∂–µ –≤ –Ω–∞—á–∞–ª–µ —Å–ø–∏—Å–∫–∞!")
            return
        
        # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ order
        prev_product = section_products[current_index - 1]
        product['order'], prev_product['order'] = prev_product['order'], product['order']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        self.save_products()
        self.refresh_products_list()
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"‚úÖ –¢–æ–≤–∞—Ä '{title}' –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤–≤–µ—Ä—Ö!")
    
    def move_product_down(self):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤–Ω–∏–∑"""
        selection = self.products_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä!")
            return
        
        item = self.products_tree.item(selection[0])
        order = item['values'][0]
        section = item['values'][1]
        title = item['values'][2]
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä
        product = next((p for p in self.products 
                       if p.get('order') == order and p.get('section') == section 
                       and p.get('title') == title), None)
        if not product:
            return
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä –≤ —Ç–æ–π –∂–µ —Å–µ–∫—Ü–∏–∏
        section_products = [p for p in self.products if p.get('section') == section]
        section_products.sort(key=lambda x: x.get('order', 0))
        
        current_index = None
        for i, p in enumerate(section_products):
            if p.get('id') == product.get('id'):
                current_index = i
                break
        
        if current_index is None or current_index == len(section_products) - 1:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–¢–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞!")
            return
        
        # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ order
        next_product = section_products[current_index + 1]
        product['order'], next_product['order'] = next_product['order'], product['order']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        self.save_products()
        self.refresh_products_list()
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"‚úÖ –¢–æ–≤–∞—Ä '{title}' –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤–Ω–∏–∑!")
    
    def delete_product(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        selection = self.products_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä!")
            return
        
        item = self.products_tree.item(selection[0])
        title = item['values'][2]
        
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä '{title}'?"):
            # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
            product = next((p for p in self.products 
                           if p.get('title') == title), None)
            if product:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º order –∏ section –¥–ª—è —Å–¥–≤–∏–≥–∞
                deleted_order = product.get('order', 0)
                section = product.get('section')
                
                # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É —Å —Ñ–∞–π–ª–∞–º–∏
                if os.path.exists(product.get('folder', '')):
                    shutil.rmtree(product.get('folder'))
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
                self.products.remove(product)
                
                # –°–¥–≤–∏–≥–∞–µ–º order –Ω–∞ -1 –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –±–æ–ª—å—à–∏–º order
                self.shift_orders_down(section, deleted_order)
                
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏ –≤ order –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞
                self.fix_duplicate_orders(section)
                
                self.save_products()
                self.refresh_products_list()
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–¢–æ–≤–∞—Ä '{title}' —É–¥–∞–ª–µ–Ω!")
    
    def edit_product(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        selection = self.products_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä!")
            return
        
        # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏
        # (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —É–∂–µ –µ—Å—Ç—å –≤ on_product_select)
        pass
    
    def clean_filename(self, name):
        """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"""
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –ø—Ä–æ–±–µ–ª–æ–≤
        clean = re.sub(r'[^a-zA-Z0-9\s]', '', name)
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
        clean = re.sub(r'\s+', '-', clean.strip())
        return clean.lower()
    
    def select_images(self):
        """–í—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        files = filedialog.askopenfilenames(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            filetypes=[("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.jpg *.jpeg *.png *.gif *.bmp")]
        )
        if files:
            self.selected_images.extend(files)
            self.update_images_list()
    
    def update_images_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        self.images_listbox.delete(0, tk.END)
        for i, img_path in enumerate(self.selected_images, 1):
            filename = os.path.basename(img_path)
            self.images_listbox.insert(tk.END, f"{i}. {filename}")
    
    def move_image_up(self):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–≤–µ—Ä—Ö"""
        selection = self.images_listbox.curselection()
        if selection and selection[0] > 0:
            idx = selection[0]
            self.selected_images[idx], self.selected_images[idx-1] = \
                self.selected_images[idx-1], self.selected_images[idx]
            self.update_images_list()
            self.images_listbox.selection_set(idx-1)
    
    def move_image_down(self):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–Ω–∏–∑"""
        selection = self.images_listbox.curselection()
        if selection and selection[0] < len(self.selected_images) - 1:
            idx = selection[0]
            self.selected_images[idx], self.selected_images[idx+1] = \
                self.selected_images[idx+1], self.selected_images[idx]
            self.update_images_list()
            self.images_listbox.selection_set(idx+1)
    
    def remove_image(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        selection = self.images_listbox.curselection()
        if selection:
            idx = selection[0]
            del self.selected_images[idx]
            self.update_images_list()
    
    def compress_image(self, input_path, output_path, max_size=2000, quality=85):
        """–°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            with Image.open(input_path) as img:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if img.mode in ('RGBA', 'LA', 'P'):
                    img = img.convert('RGB')
                
                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if img.width > max_size or img.height > max_size:
                    ratio = min(max_size / img.width, max_size / img.height)
                    new_size = (int(img.width * ratio), int(img.height * ratio))
                    img = img.resize(new_size, Image.Resampling.LANCZOS)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                img.save(output_path, 'JPEG', quality=quality, optimize=True)
                return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è {input_path}: {e}")
            return False
    
    def save_product(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        title = self.title_entry.get().strip()
        desc = self.desc_entry.get().strip()
        price = self.price_entry.get().strip()
        meta = self.meta_entry.get().strip()
        section = self.section_entry_var.get()
        status = self.status_entry_var.get()
        
        if not title:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞!")
            return
        
        if not self.selected_images:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        self.save_btn.config(state='disabled', text="üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...")
        self.root.update()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        import threading
        thread = threading.Thread(target=self._save_product_worker, 
                                args=(title, desc, price, meta, section, status))
        thread.daemon = True
        thread.start()
    
    def _save_product_worker(self, title, desc, price, meta, section, status):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π ID –∏ order
            next_id = self.get_next_id()
            next_order = self.get_next_order(section)
            
            # –°–¥–≤–∏–≥–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ order –Ω–∞ +1
            self.shift_orders_up(section)
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞
            clean_name = self.clean_filename(title)
            product_folder = os.path.join("img", f"product_{next_id}")
            os.makedirs(product_folder, exist_ok=True)
            
            # –°–∂–∏–º–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_names = []
            for i, img_path in enumerate(self.selected_images, 1):
                filename = f"product_{next_id}_{i}.jpg"
                output_path = os.path.join(product_folder, filename)
                
                if self.compress_image(img_path, output_path):
                    image_names.append(filename)
                else:
                    self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", 
                                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {img_path}"))
                    return
            
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
            product = {
                "id": next_id,
                "order": next_order,
                "section": section,
                "title": title,
                "price": price,
                "desc": desc,
                "meta": meta,
                "status": status,
                "images": "|".join(image_names),
                "link": "https://t.me/stub123",
                "created": datetime.now().isoformat()
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
            self.products.append(product)
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏ –≤ order –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞
            self.fix_duplicate_orders(section)
            
            self.save_products()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.root.after(0, self._save_product_success, title, product_folder, next_id, next_order, len(image_names))
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}"
            self.root.after(0, self._save_product_error, error_msg)
    
    def _save_product_success(self, title, product_folder, next_id, next_order, image_count):
        """–£—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        self.save_btn.config(state='normal', text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä")
        self.refresh_products_list()
        self.clear_form()
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", 
                          f"‚úÖ –¢–æ–≤–∞—Ä '{title}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n"
                          f"üìÅ –ü–∞–ø–∫–∞: {product_folder}\n"
                          f"üÜî ID: {next_id}\n"
                          f"üìä –ü–æ—Ä—è–¥–æ–∫: {next_order}\n"
                          f"üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {image_count}")
    
    def _save_product_error(self, error_msg):
        """–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        self.save_btn.config(state='normal', text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä")
        messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
        

    
    def clear_form(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã"""
        self.title_entry.delete(0, tk.END)
        self.desc_entry.delete(0, tk.END)
        self.price_entry.delete(0, tk.END)
        self.meta_entry.delete(0, tk.END)
        self.section_entry_var.set("home")
        self.status_entry_var.set("stock")
        self.selected_images.clear()
        self.update_images_list()
    
    def paste_text(self, event):
        """–í—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞"""
        try:
            clipboard_text = self.root.clipboard_get()
            widget = event.widget
            widget.delete(0, tk.END)
            widget.insert(0, clipboard_text)
            return 'break'  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    
    def setup_deploy_tab(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –¥–µ–ø–ª–æ—è"""
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        center_frame = ttk.Frame(parent)
        center_frame.pack(expand=True, fill=tk.BOTH)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(center_frame, text="üöÄ –î–µ–ø–ª–æ–π –Ω–∞ GitHub", 
                               font=('Arial', 16, 'bold'))
        title_label.pack(pady=20)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        desc_label = ttk.Label(center_frame, 
                              text="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ GitHub –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–ø–ª–æ–π —Å–∞–π—Ç–∞", 
                              font=('Arial', 12))
        desc_label.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–µ–ø–ª–æ—è
        self.deploy_btn = ttk.Button(center_frame, text="üöÄ –ó–∞–¥–µ–ø–ª–æ–∏—Ç—å –Ω–∞ GitHub", 
                                    command=self.deploy_to_github, width=30)
        self.deploy_btn.pack(pady=20)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        self.deploy_progress = ttk.Progressbar(center_frame, mode='indeterminate', length=300)
        self.deploy_progress.pack(pady=10)
        
        # –°—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è
        self.deploy_status = ttk.Label(center_frame, text="", font=('Arial', 10))
        self.deploy_status.pack(pady=10)
        
        # –õ–æ–≥ –¥–µ–ø–ª–æ—è
        self.deploy_log = scrolledtext.ScrolledText(center_frame, height=10, width=60)
        self.deploy_log.pack(pady=10, padx=20, fill=tk.BOTH, expand=True)
    
    def deploy_to_github(self):
        """–î–µ–ø–ª–æ–π –Ω–∞ GitHub"""
        self.deploy_btn.config(state='disabled')
        self.deploy_progress.start()
        self.deploy_status.config(text="üîÑ –î–µ–ø–ª–æ–π –∑–∞–ø—É—â–µ–Ω...")
        self.deploy_log.delete(1.0, tk.END)
        self.deploy_log.insert(tk.END, "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π...\n")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        import threading
        thread = threading.Thread(target=self._deploy_worker)
        thread.daemon = True
        thread.start()
    
    def _deploy_worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –¥–µ–ø–ª–æ—è"""
        try:
            import subprocess
            import os
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Git
            self.deploy_log.insert(tk.END, "üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Git...\n")
            result = subprocess.run(['git', 'status', '--porcelain'], 
                                  capture_output=True, text=True, encoding='utf-8')
            
            if result.stdout.strip():
                self.deploy_log.insert(tk.END, "üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ Git...\n")
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                subprocess.run(['git', 'add', '.'], check=True)
                
                # –ö–æ–º–º–∏—Ç–∏–º
                commit_msg = f"Auto-deploy: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                subprocess.run(['git', 'commit', '-m', commit_msg], check=True)
                self.deploy_log.insert(tk.END, f"‚úÖ –ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω: {commit_msg}\n")
            else:
                self.deploy_log.insert(tk.END, "‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞\n")
            
            # –ü—É—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.deploy_log.insert(tk.END, "üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ GitHub...\n")
            subprocess.run(['git', 'push', 'origin', 'main'], check=True)
            self.deploy_log.insert(tk.END, "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ GitHub!\n")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.root.after(0, self._deploy_success)
            
        except subprocess.CalledProcessError as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è: {e}\n"
            self.deploy_log.insert(tk.END, error_msg)
            self.root.after(0, self._deploy_error, error_msg)
        except Exception as e:
            error_msg = f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}\n"
            self.deploy_log.insert(tk.END, error_msg)
            self.root.after(0, self._deploy_error, error_msg)
    
    def _deploy_success(self):
        """–£—Å–ø–µ—à–Ω—ã–π –¥–µ–ø–ª–æ–π"""
        self.deploy_progress.stop()
        self.deploy_btn.config(state='normal')
        self.deploy_status.config(text="‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        self.deploy_log.insert(tk.END, "\nüéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!\n")
        self.deploy_log.insert(tk.END, "üåê –°–∞–π—Ç –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã\n")
        self.deploy_log.insert(tk.END, "üìä –°—Ç–∞—Ç—É—Å: https://github.com/nothingitto-ops/platforma-site-clean/actions\n")
        self.deploy_log.insert(tk.END, "üåê –°–∞–π—Ç: https://platformasluchay.ru\n")
    
    def _deploy_error(self, error_msg):
        """–û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è"""
        self.deploy_progress.stop()
        self.deploy_btn.config(state='normal')
        self.deploy_status.config(text="‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è")
        self.deploy_log.insert(tk.END, f"\n‚ùå –î–µ–ø–ª–æ–π –Ω–µ —É–¥–∞–ª—Å—è: {error_msg}\n")

def main():
    root = tk.Tk()
    app = CleanCatalogManager(root)
    root.mainloop()

if __name__ == "__main__":
    main()
