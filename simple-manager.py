#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# 
# üõçÔ∏è Catalog Manager Pro v2.2
# –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (18.08.2025):
# ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–Ω–∞—è –∏–∫–æ–Ω–∫–∞ —Å–∞–π—Ç–∞
# ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ 6-—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è "–ü–æ—è—Å P2" 
# ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ 5-—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è "–§–∞—Ä—Ç—É–∫"
# ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–°–æ—Å—Ç–∞–≤" –≤ –º–æ–±–∏–ª—å–Ω–æ–π –º–æ–¥–∞–ª–∫–µ (–ø—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–º—ã–∫–∞–Ω–∏–µ–º)
# ‚úÖ –û–¢–ö–õ–Æ–ß–ï–ù–ê —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ê –∫–Ω–æ–ø–∫–∞ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" - —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∏–º–≤–æ–ª—ã –≤–∞–ª—é—Ç—ã
# ‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã –≤ git

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import json
import os
import shutil
from PIL import Image, ImageTk
import zipfile
from datetime import datetime
import re
import requests
import csv
import io

class ImprovedCatalogApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üõçÔ∏è Catalog Manager Pro v2.2 - –û—á–∏—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ Google Sheets")
        self.root.geometry("1200x800")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
        self.setup_styles()
        
        # –î–∞–Ω–Ω—ã–µ
        self.products = []
        self.selected_images = []
        self.sheets_data = []
        self.load_products()
        # self.load_sheets_data()  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
        
        self.setup_ui()
    
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è –∫–Ω–æ–ø–æ–∫"""
        style = ttk.Style()
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        style.configure('TButton', font=('Arial', 12))
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–Ω–æ–ø–æ–∫
        style.configure('Large.TButton', font=('Arial', 13, 'bold'), padding=5)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
        style.configure('Action.TButton', font=('Arial', 12), padding=3)
        
        # –°—Ç–∏–ª–∏ –¥–ª—è Treeview (—Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤)
        style.configure('Treeview', font=('Arial', 12), rowheight=30)
        style.configure('Treeview.Heading', font=('Arial', 12, 'bold'))
        
        # –°—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
        style.configure('TEntry', font=('Arial', 12))
        style.configure('TLabel', font=('Arial', 12))
        style.configure('TLabelframe.Label', font=('Arial', 12, 'bold'))
        
    def setup_ui(self):
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        notebook = ttk.Notebook(self.root)
        notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ 1: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏
        products_frame = ttk.Frame(notebook)
        notebook.add(products_frame, text="üì¶ –¢–æ–≤–∞—Ä—ã")
        self.setup_products_tab(products_frame)
        
        # –í–∫–ª–∞–¥–∫–∞ 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        add_frame = ttk.Frame(notebook)
        notebook.add(add_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
        self.setup_add_tab(add_frame)
        
        # –í–∫–ª–∞–¥–∫–∞ 3: –≠–∫—Å–ø–æ—Ä—Ç
        export_frame = ttk.Frame(notebook)
        notebook.add(export_frame, text="üì§ –≠–∫—Å–ø–æ—Ä—Ç")
        self.setup_export_tab(export_frame)
        
    def setup_products_tab(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏"""
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        top_frame = ttk.Frame(parent)
        top_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        # sync_btn = ttk.Button(top_frame, text="üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Google Sheets", 
        #                      command=self.sync_google_sheets, width=35)
        # sync_btn.pack(side=tk.LEFT, padx=5, pady=2)
        
        deploy_btn = ttk.Button(top_frame, text="üöÄ –î–µ–ø–ª–æ–π –Ω–∞ GitHub", 
                               command=self.deploy_to_github, width=20)
        deploy_btn.pack(side=tk.LEFT, padx=5, pady=2)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(parent)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        left_frame = ttk.LabelFrame(main_frame, text="üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", padding="10")
        left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))
        
        # –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        self.products_tree = ttk.Treeview(left_frame, columns=("title", "price", "images"), show="headings", height=20)
        self.products_tree.heading("title", text="–ù–∞–∑–≤–∞–Ω–∏–µ")
        self.products_tree.heading("price", text="–¶–µ–Ω–∞")
        self.products_tree.heading("images", text="–§–æ—Ç–æ")
        self.products_tree.column("title", width=300)
        self.products_tree.column("price", width=100)
        self.products_tree.column("images", width=80)
        self.products_tree.pack(fill=tk.BOTH, expand=True)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞
        scrollbar = ttk.Scrollbar(left_frame, orient=tk.VERTICAL, command=self.products_tree.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.products_tree.configure(yscrollcommand=scrollbar.set)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
        btn_frame = ttk.Frame(left_frame)
        btn_frame.pack(fill=tk.X, pady=5)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏ —Å—Ç–∏–ª—è–º–∏
        copy_btn = ttk.Button(btn_frame, text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–º–µ–Ω–∞", 
                             command=self.copy_image_names, width=20, style='Action.TButton')
        copy_btn.pack(side=tk.LEFT, padx=5, pady=2, fill=tk.X, expand=True)
        
        reorder_btn = ttk.Button(btn_frame, text="üñºÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Ñ–æ—Ç–æ", 
                                command=self.reorder_images, width=20, style='Action.TButton')
        reorder_btn.pack(side=tk.LEFT, padx=5, pady=2, fill=tk.X, expand=True)
        
        edit_btn = ttk.Button(btn_frame, text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                             command=self.edit_product, width=20, style='Action.TButton')
        edit_btn.pack(side=tk.LEFT, padx=5, pady=2, fill=tk.X, expand=True)
        
        delete_btn = ttk.Button(btn_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
                               command=self.delete_product, width=20, style='Action.TButton')
        delete_btn.pack(side=tk.LEFT, padx=5, pady=2, fill=tk.X, expand=True)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞
        right_frame = ttk.LabelFrame(main_frame, text="üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞", padding="10")
        right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(5, 0))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
        info_frame = ttk.LabelFrame(right_frame, text="üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ", padding="10")
        info_frame.pack(fill=tk.X, pady=5)
        
        # –ü–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        ttk.Label(info_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ:").grid(row=0, column=0, sticky=tk.W, pady=2)
        self.edit_title_entry = ttk.Entry(info_frame, width=30, font=('Arial', 12))
        self.edit_title_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), pady=2, padx=(10, 0))
        
        ttk.Label(info_frame, text="–¶–µ–Ω–∞:").grid(row=1, column=0, sticky=tk.W, pady=2)
        self.edit_price_entry = ttk.Entry(info_frame, width=30, font=('Arial', 12))
        self.edit_price_entry.grid(row=1, column=1, sticky=(tk.W, tk.E), pady=2, padx=(10, 0))
        
        ttk.Label(info_frame, text="–û–ø–∏—Å–∞–Ω–∏–µ:").grid(row=2, column=0, sticky=tk.W, pady=2)
        self.edit_desc_entry = ttk.Entry(info_frame, width=30, font=('Arial', 12))
        self.edit_desc_entry.grid(row=2, column=1, sticky=(tk.W, tk.E), pady=2, padx=(10, 0))
        
        ttk.Label(info_frame, text="–ú–µ—Ç–∞:").grid(row=3, column=0, sticky=tk.W, pady=2)
        self.edit_meta_entry = ttk.Entry(info_frame, width=30, font=('Arial', 12))
        self.edit_meta_entry.grid(row=3, column=1, sticky=(tk.W, tk.E), pady=2, padx=(10, 0))
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        save_changes_btn = ttk.Button(info_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", 
                                     command=self.save_product_changes, style='Action.TButton')
        save_changes_btn.grid(row=4, column=0, columnspan=2, pady=10, sticky=(tk.W, tk.E))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤
        info_frame.columnconfigure(1, weight=1)
        
        # –ì–∞–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        gallery_frame = ttk.LabelFrame(right_frame, text="üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", padding="10")
        gallery_frame.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # Canvas –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.canvas = tk.Canvas(gallery_frame, bg='white')
        scrollbar_gallery = ttk.Scrollbar(gallery_frame, orient=tk.HORIZONTAL, command=self.canvas.xview)
        self.canvas.configure(xscrollcommand=scrollbar_gallery.set)
        
        self.canvas.pack(fill=tk.BOTH, expand=True)
        scrollbar_gallery.pack(fill=tk.X)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        self.products_tree.bind('<<TreeviewSelect>>', self.on_product_select)
        
        self.refresh_products_list()
        
    def setup_add_tab(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        # –§–æ—Ä–º–∞
        form_frame = ttk.LabelFrame(parent, text="üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ", padding="10")
        form_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # –ü–æ–ª—è —Ñ–æ—Ä–º—ã
        ttk.Label(form_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ:").grid(row=0, column=0, sticky=tk.W, pady=2)
        self.title_entry = ttk.Entry(form_frame, width=50)
        self.title_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), pady=2, padx=(10, 0))
        
        ttk.Label(form_frame, text="–û–ø–∏—Å–∞–Ω–∏–µ:").grid(row=1, column=0, sticky=tk.W, pady=2)
        self.desc_entry = ttk.Entry(form_frame, width=50)
        self.desc_entry.grid(row=1, column=1, sticky=(tk.W, tk.E), pady=2, padx=(10, 0))
        
        ttk.Label(form_frame, text="–¶–µ–Ω–∞:").grid(row=2, column=0, sticky=tk.W, pady=2)
        self.price_entry = ttk.Entry(form_frame, width=50)
        self.price_entry.grid(row=2, column=1, sticky=(tk.W, tk.E), pady=2, padx=(10, 0))
        
        ttk.Label(form_frame, text="–ú–µ—Ç–∞:").grid(row=3, column=0, sticky=tk.W, pady=2)
        self.meta_entry = ttk.Entry(form_frame, width=50)
        self.meta_entry.grid(row=3, column=1, sticky=(tk.W, tk.E), pady=2, padx=(10, 0))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤
        form_frame.columnconfigure(1, weight=1)
        
        # –ü–∞–Ω–µ–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_frame = ttk.LabelFrame(parent, text="üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", padding="10")
        images_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        img_btn_frame = ttk.Frame(images_frame)
        img_btn_frame.pack(fill=tk.X, pady=5)
        
        select_btn = ttk.Button(img_btn_frame, text="üì∏ –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ", 
                               command=self.select_images, width=15)
        select_btn.pack(side=tk.LEFT, padx=5, pady=2)
        
        up_btn = ttk.Button(img_btn_frame, text="‚¨ÜÔ∏è", command=self.move_image_up, width=5)
        up_btn.pack(side=tk.LEFT, padx=2, pady=2)
        
        down_btn = ttk.Button(img_btn_frame, text="‚¨áÔ∏è", command=self.move_image_down, width=5)
        down_btn.pack(side=tk.LEFT, padx=2, pady=2)
        
        remove_btn = ttk.Button(img_btn_frame, text="‚ùå", command=self.remove_image, width=5)
        remove_btn.pack(side=tk.LEFT, padx=2, pady=2)
        
        # –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.images_listbox = tk.Listbox(images_frame, height=8)
        self.images_listbox.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_btn = ttk.Button(parent, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä", 
                             command=self.save_product, width=25)
        save_btn.pack(pady=10)
        
    def setup_export_tab(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        center_frame = ttk.Frame(parent)
        center_frame.pack(expand=True, fill=tk.BOTH)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(center_frame, text="üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –¥–ª—è –¥–µ–ø–ª–æ—è", 
                               font=('Arial', 16, 'bold'))
        title_label.pack(pady=20)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        desc_label = ttk.Label(center_frame, 
                              text="–°–æ–∑–¥–∞–µ—Ç ZIP –∞—Ä—Ö–∏–≤ —Å–æ –≤—Å–µ–º–∏ —Ñ–∞–π–ª–∞–º–∏ —Å–∞–π—Ç–∞,\n–≥–æ—Ç–æ–≤—ã–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Netlify", 
                              font=('Arial', 12))
        desc_label.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
        archive_btn = ttk.Button(center_frame, text="üì¶ –°–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤ –¥–ª—è –¥–µ–ø–ª–æ—è", 
                                command=self.create_deploy_archive, width=30, style='Large.TButton')
        archive_btn.pack(pady=20)
    
    def load_sheets_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets"""
        try:
            if os.path.exists('sheets_data.json'):
                with open('sheets_data.json', 'r', encoding='utf-8') as f:
                    self.sheets_data = json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö Google Sheets: {e}")
            self.sheets_data = []
    
    def update_from_sheets(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets"""
        try:
            import subprocess
            result = subprocess.run(['python', 'scripts/fetch_sheets_data.py'], 
                                  capture_output=True, text=True, encoding='utf-8')
            
            if result.returncode == 0:
                self.load_sheets_data()
                self.refresh_products_list()
                messagebox.showinfo("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", "‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ Google Sheets!")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{result.stderr}")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:\n{e}")
    
    def sync_with_sheets(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets"""
        try:
            import subprocess
            result = subprocess.run(['python', 'scripts/sync_with_sheets_improved.py'], 
                                  capture_output=True, text=True, encoding='utf-8')
            
            if result.returncode == 0:
                messagebox.showinfo("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", 
                                  f"üéâ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
                                  f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:\n{result.stderr}")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å:\n{e}")
    

    
    def setup_google_api(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets API"""
        try:
            import subprocess
            result = subprocess.run(['python', 'scripts/setup_google_api.py'], 
                                  capture_output=True, text=True, encoding='utf-8')
            
            if result.returncode == 0:
                messagebox.showinfo("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", 
                                  "Google Sheets API –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
                                  "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–∞–±–ª–∏—Ü—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n{result.stderr}")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API:\n{e}")
    
    def on_product_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞"""
        selection = self.products_tree.selection()
        if not selection:
            return
        
        item = self.products_tree.item(selection[0])
        title = item['values'][0]
        
        product = next((p for p in self.products if p["title"] == title), None)
        if not product:
            return
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.edit_title_entry.delete(0, tk.END)
        self.edit_title_entry.insert(0, product.get('title', ''))
        
        self.edit_price_entry.delete(0, tk.END)
        self.edit_price_entry.insert(0, product.get('price', ''))
        
        self.edit_desc_entry.delete(0, tk.END)
        self.edit_desc_entry.insert(0, product.get('desc', ''))
        
        self.edit_meta_entry.delete(0, tk.END)
        self.edit_meta_entry.insert(0, product.get('meta', ''))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.current_editing_product = product
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.show_product_images(product)
    
    def save_product_changes(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ç–æ–≤–∞—Ä–µ"""
        if not hasattr(self, 'current_editing_product') or not self.current_editing_product:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        new_title = self.edit_title_entry.get().strip()
        new_price = self.edit_price_entry.get().strip()
        new_desc = self.edit_desc_entry.get().strip()
        new_meta = self.edit_meta_entry.get().strip()
        
        if not new_title:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return
        
        # –û—á–∏—â–∞–µ–º —Ü–µ–Ω—É –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        if new_price:
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, —Ä—É–±–ª–∏, —Ä. –∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã
            clean_price = new_price.replace(' ', '').replace('‚ÇΩ', '').replace('—Ä.', '').replace('—Ä', '')
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
            try:
                int(clean_price)
                new_price = clean_price  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —á–∏—Å–ª–æ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
        self.current_editing_product['title'] = new_title
        self.current_editing_product['price'] = new_price
        self.current_editing_product['desc'] = new_desc
        self.current_editing_product['meta'] = new_meta
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        self.save_products()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        self.refresh_products_list()
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"‚úÖ –¢–æ–≤–∞—Ä '{new_title}' –æ–±–Ω–æ–≤–ª–µ–Ω!")
    
    def show_product_images(self, product):
        """–ü–æ–∫–∞–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞"""
        # –û—á–∏—â–∞–µ–º canvas
        self.canvas.delete("all")
        
        if not product.get('images'):
            return
        
        images = product['images'].split('|')
        x_offset = 10
        
        for i, img_name in enumerate(images):
            # –ò—â–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img_path = None
            if '/' in img_name:
                # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å
                img_path = os.path.join('img', img_name)
            else:
                # –¢–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞, –∏—â–µ–º –≤ –ø–∞–ø–∫–µ —Ç–æ–≤–∞—Ä–∞
                folder = product.get('folder', '')
                if folder:
                    img_path = os.path.join(folder, img_name)
                else:
                    # –ò—â–µ–º –ø–æ –≤—Å–µ–º—É img
                    for root, dirs, files in os.walk('img'):
                        if img_name in files:
                            img_path = os.path.join(root, img_name)
                            break
            
            if img_path and os.path.exists(img_path):
                try:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    img = Image.open(img_path)
                    img.thumbnail((200, 200), Image.Resampling.LANCZOS)
                    photo = ImageTk.PhotoImage(img)
                    
                    # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    img_frame = tk.Frame(self.canvas, bg='white', relief=tk.RAISED, bd=2)
                    self.canvas.create_window(x_offset, 10, anchor=tk.NW, window=img_frame)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    img_label = tk.Label(img_frame, image=photo, bg='white')
                    img_label.image = photo  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
                    img_label.pack(padx=5, pady=5)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä
                    num_label = tk.Label(img_frame, text=f"{i+1}", bg='white', 
                                       font=('Arial', 14, 'bold'), fg='blue')
                    num_label.pack(pady=2)
                    
                    x_offset += 220
                    
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {img_path}: {e}")
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                placeholder_frame = tk.Frame(self.canvas, bg='lightgray', relief=tk.RAISED, bd=2)
                self.canvas.create_window(x_offset, 10, anchor=tk.NW, window=placeholder_frame)
                
                placeholder_label = tk.Label(placeholder_frame, text=f"‚ùå\n{img_name}", 
                                           bg='lightgray', font=('Arial', 10), 
                                           width=20, height=10)
                placeholder_label.pack(padx=5, pady=5)
                
                x_offset += 220
        
        # –û–±–Ω–æ–≤–ª—è–µ–º scrollregion
        self.canvas.configure(scrollregion=self.canvas.bbox("all"))
    
    def refresh_products_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        for item in self.products_tree.get_children():
            self.products_tree.delete(item)
        
        for product in self.products:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            image_count = len(product["images"].split("|")) if product["images"] else 0
            
            self.products_tree.insert("", "end", values=(
                product["title"],
                product.get("price", ""),
                f"{image_count} —Ñ–æ—Ç–æ"
            ))
    
    def clean_filename(self, name):
        """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"""
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –ø—Ä–æ–±–µ–ª–æ–≤
        clean = re.sub(r'[^a-zA-Z0-9\s]', '', name)
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
        clean = re.sub(r'\s+', '-', clean.strip())
        return clean.lower()
    
    def select_images(self):
        """–í—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        files = filedialog.askopenfilenames(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            filetypes=[("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.jpg *.jpeg *.png *.gif *.bmp")]
        )
        if files:
            self.selected_images.extend(files)
            self.update_images_list()
    
    def update_images_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        self.images_listbox.delete(0, tk.END)
        for i, img_path in enumerate(self.selected_images, 1):
            filename = os.path.basename(img_path)
            self.images_listbox.insert(tk.END, f"{i}. {filename}")
    
    def move_image_up(self):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–≤–µ—Ä—Ö"""
        selection = self.images_listbox.curselection()
        if selection and selection[0] > 0:
            idx = selection[0]
            self.selected_images[idx], self.selected_images[idx-1] = \
                self.selected_images[idx-1], self.selected_images[idx]
            self.update_images_list()
            self.images_listbox.selection_set(idx-1)
    
    def move_image_down(self):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–Ω–∏–∑"""
        selection = self.images_listbox.curselection()
        if selection and selection[0] < len(self.selected_images) - 1:
            idx = selection[0]
            self.selected_images[idx], self.selected_images[idx+1] = \
                self.selected_images[idx+1], self.selected_images[idx]
            self.update_images_list()
            self.images_listbox.selection_set(idx+1)
    
    def remove_image(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        selection = self.images_listbox.curselection()
        if selection:
            idx = selection[0]
            del self.selected_images[idx]
            self.update_images_list()
    
    def compress_image(self, input_path, output_path, max_size=2000, quality=85):
        """–°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            with Image.open(input_path) as img:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if img.mode in ('RGBA', 'LA', 'P'):
                    img = img.convert('RGB')
                
                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if img.width > max_size or img.height > max_size:
                    ratio = min(max_size / img.width, max_size / img.height)
                    new_size = (int(img.width * ratio), int(img.height * ratio))
                    img = img.resize(new_size, Image.Resampling.LANCZOS)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                img.save(output_path, 'JPEG', quality=quality, optimize=True)
                return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è {input_path}: {e}")
            return False
    
    def save_product(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        title = self.title_entry.get().strip()
        desc = self.desc_entry.get().strip()
        price = self.price_entry.get().strip()
        meta = self.meta_entry.get().strip()
        
        if not title:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞!")
            return
        
        if not self.selected_images:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞
        clean_name = self.clean_filename(title)
        product_folder = os.path.join("img", clean_name)
        os.makedirs(product_folder, exist_ok=True)
        
        # –°–∂–∏–º–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_names = []
        for i, img_path in enumerate(self.selected_images, 1):
            filename = f"{clean_name}-{i}.jpg"
            output_path = os.path.join(product_folder, filename)
            
            if self.compress_image(img_path, output_path):
                image_names.append(filename)
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {img_path}")
                return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
        product = {
            "title": title,
            "desc": desc,
            "price": price,
            "meta": meta,
            "status": "active",
            "images": "|".join(image_names),
            "folder": product_folder,
            "created": datetime.now().isoformat()
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
        self.products.append(product)
        self.save_products()
        self.refresh_products_list()
        
        # –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        self.clear_form()
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", 
                          f"‚úÖ –¢–æ–≤–∞—Ä '{title}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n"
                          f"üìÅ –ü–∞–ø–∫–∞: {product_folder}\n"
                          f"üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_names)}")
    
    def clear_form(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã"""
        self.title_entry.delete(0, tk.END)
        self.desc_entry.delete(0, tk.END)
        self.price_entry.delete(0, tk.END)
        self.meta_entry.delete(0, tk.END)
        self.selected_images.clear()
        self.update_images_list()
    
    def copy_image_names(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –±—É—Ñ–µ—Ä"""
        selection = self.products_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä!")
            return
        
        item = self.products_tree.item(selection[0])
        title = item['values'][0]
        
        product = next((p for p in self.products if p["title"] == title), None)
        if not product or not product["images"]:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–£ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!")
            return
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä
        self.root.clipboard_clear()
        self.root.clipboard_append(product["images"])
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", 
                          f"‚úÖ –ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã!\n\n{product['images']}\n\n"
                          "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç—å –∏—Ö –≤ Google Sheets")
    
    def edit_product(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        selection = self.products_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä!")
            return
        
        item = self.products_tree.item(selection[0])
        title = item['values'][0]
        
        product = next((p for p in self.products if p["title"] == title), None)
        if not product:
            return
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.edit_title_entry.delete(0, tk.END)
        self.edit_title_entry.insert(0, product["title"])
        
        self.edit_price_entry.delete(0, tk.END)
        self.edit_price_entry.insert(0, product.get("price", ""))
        
        self.edit_desc_entry.delete(0, tk.END)
        self.edit_desc_entry.insert(0, product.get("desc", ""))
        
        self.edit_meta_entry.delete(0, tk.END)
        self.edit_meta_entry.insert(0, product.get("meta", ""))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.current_editing_product = product
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.show_product_images(product)
    
    def delete_product(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        selection = self.products_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä!")
            return
        
        item = self.products_tree.item(selection[0])
        title = item['values'][0]
        
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä '{title}'?"):
            product = next((p for p in self.products if p["title"] == title), None)
            if product:
                # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É —Å —Ñ–∞–π–ª–∞–º–∏
                if os.path.exists(product["folder"]):
                    shutil.rmtree(product["folder"])
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
                self.products.remove(product)
                self.save_products()
                self.refresh_products_list()
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–¢–æ–≤–∞—Ä '{title}' —É–¥–∞–ª–µ–Ω!")
    
    def reorder_images(self):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        selection = self.products_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä!")
            return
        
        item = self.products_tree.item(selection[0])
        title = item['values'][0]
        
        product = next((p for p in self.products if p["title"] == title), None)
        if not product or not product.get("images"):
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–£ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞
        reorder_window = tk.Toplevel(self.root)
        reorder_window.title(f"üñºÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Ñ–æ—Ç–æ - {title}")
        reorder_window.geometry("600x500")
        
        # –°–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_frame = ttk.LabelFrame(reorder_window, text="üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", padding="10")
        images_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –°–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_listbox = tk.Listbox(images_frame, height=15)
        images_listbox.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_names = product["images"].split("|")
        for i, img_name in enumerate(image_names, 1):
            images_listbox.insert(tk.END, f"{i}. {img_name}")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = ttk.Frame(images_frame)
        btn_frame.pack(fill=tk.X, pady=5)
        
        def move_up():
            selection = images_listbox.curselection()
            if selection and selection[0] > 0:
                idx = selection[0]
                # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –≤ —Å–ø–∏—Å–∫–µ
                image_names[idx], image_names[idx-1] = image_names[idx-1], image_names[idx]
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                images_listbox.delete(0, tk.END)
                for i, img_name in enumerate(image_names, 1):
                    images_listbox.insert(tk.END, f"{i}. {img_name}")
                images_listbox.selection_set(idx-1)
        
        def move_down():
            selection = images_listbox.curselection()
            if selection and selection[0] < len(image_names) - 1:
                idx = selection[0]
                # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –≤ —Å–ø–∏—Å–∫–µ
                image_names[idx], image_names[idx+1] = image_names[idx+1], image_names[idx]
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                images_listbox.delete(0, tk.END)
                for i, img_name in enumerate(image_names, 1):
                    images_listbox.insert(tk.END, f"{i}. {img_name}")
                images_listbox.selection_set(idx+1)
        
        def save_order():
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤ —Ç–æ–≤–∞—Ä–µ
            product["images"] = "|".join(image_names)
            self.save_products()
            self.refresh_products_list()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–∫–Ω–µ
            if hasattr(self, 'product_info'):
                self.on_product_select(None)
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "‚úÖ –ü–æ—Ä—è–¥–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            reorder_window.destroy()
        
        def copy_new_names():
            # –ö–æ–ø–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∏–º–µ–Ω–∞ –≤ –±—É—Ñ–µ—Ä
            new_names = "|".join(image_names)
            self.root.clipboard_clear()
            self.root.clipboard_append(new_names)
            messagebox.showinfo("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", 
                              f"‚úÖ –ù–æ–≤—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã!\n\n{new_names}\n\n"
                              "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç—å –∏—Ö –≤ Google Sheets")
        
        up_btn = ttk.Button(btn_frame, text="‚¨ÜÔ∏è", command=move_up, width=5)
        up_btn.pack(side=tk.LEFT, padx=5, pady=2)
        
        down_btn = ttk.Button(btn_frame, text="‚¨áÔ∏è", command=move_down, width=5)
        down_btn.pack(side=tk.LEFT, padx=5, pady=2)
        
        save_btn = ttk.Button(btn_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫", 
                             command=save_order, width=20)
        save_btn.pack(side=tk.LEFT, padx=10, pady=2)
        
        copy_btn = ttk.Button(btn_frame, text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∏–º–µ–Ω–∞", 
                             command=copy_new_names, width=25)
        copy_btn.pack(side=tk.LEFT, padx=5, pady=2)
    
    def import_from_folders(self):
        """–ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ø–∞–ø–æ–∫"""
        try:
            import subprocess
            result = subprocess.run(['python', 'scripts/import_existing_products.py'], 
                                  capture_output=True, text=True, encoding='utf-8')
            
            if result.returncode == 0:
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã
                self.load_products()
                self.refresh_products_list()
                messagebox.showinfo("–ò–º–ø–æ—Ä—Ç", 
                                  f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
                                  f"üì¶ –¢–æ–≤–∞—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(self.products)}")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:\n{result.stderr}")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏–º–ø–æ—Ä—Ç:\n{e}")
    
    def export_to_sheets(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets —Ñ–æ—Ä–º–∞—Ç"""
        if not self.products:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞!")
            return
        
        # –°–æ–∑–¥–∞–µ–º TSV –¥–∞–Ω–Ω—ã–µ
        tsv_lines = ["Section\tTitle\tPrice\tDesc\tMeta\tStatus\tImages\tLink"]
        
        for product in self.products:
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
            folder_name = os.path.basename(product.get('folder', ''))
            if not folder_name:
                folder_name = self.clean_filename(product['title'])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
            if product.get('images'):
                image_names = product['images'].split('|')
                english_images = [f"{folder_name}/{img}" for img in image_names]
                images_str = "|".join(english_images)
            else:
                images_str = ""
            
            tsv_line = f"home\t{product['title']}\t{product.get('price', '')}\t{product.get('desc', '')}\t{product.get('meta', '')}\t{product.get('status', 'active')}\t{images_str}\thttps://t.me/stub123"
            tsv_lines.append(tsv_line)
        
        tsv_content = "\n".join(tsv_lines)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        filename = f"google-sheets-update-{datetime.now().strftime('%Y%m%d-%H%M%S')}.tsv"
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(tsv_content)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä
        self.root.clipboard_clear()
        self.root.clipboard_append(tsv_content)
        
        messagebox.showinfo("Google Sheets", 
                          f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–ª—è Google Sheets!\n"
                          f"üìÅ –§–∞–π–ª: {filename}\n"
                          f"üìã –î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä\n\n"
                          f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
                          f"1. –û—Ç–∫—Ä–æ–π—Ç–µ Google Sheets\n"
                          f"2. –í—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞\n"
                          f"3. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É")
    
    def show_sheets_data(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets"""
        if not self.sheets_data:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets. –ù–∞–∂–º–∏—Ç–µ '–û–±–Ω–æ–≤–∏—Ç—å –∏–∑ Google Sheets'")
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ —Å –¥–∞–Ω–Ω—ã–º–∏
        data_window = tk.Toplevel(self.root)
        data_window.title("üìä –î–∞–Ω–Ω—ã–µ Google Sheets")
        data_window.geometry("800x600")
        
        text_widget = scrolledtext.ScrolledText(data_window, wrap=tk.WORD)
        text_widget.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        for i, product in enumerate(self.sheets_data, 1):
            text_widget.insert(tk.END, f"{i}. {product['title']}\n")
            text_widget.insert(tk.END, f"   –¶–µ–Ω–∞: {product.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n")
            text_widget.insert(tk.END, f"   –û–ø–∏—Å–∞–Ω–∏–µ: {product.get('desc', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n")
            text_widget.insert(tk.END, f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {product.get('images', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}\n")
            text_widget.insert(tk.END, "-" * 50 + "\n")
    
    def create_deploy_archive(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –¥–ª—è –¥–µ–ø–ª–æ—è"""
        if not self.products:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∞!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
        archive_name = f"platforma-site-{datetime.now().strftime('%Y%m%d-%H%M%S')}.zip"
        
        with zipfile.ZipFile(archive_name, 'w', zipfile.ZIP_DEFLATED) as zipf:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–∞–π—Ç–∞ –∏–∑ –ø–∞–ø–∫–∏ web
            web_files = ['index.html', 'styles.min.css', 'mobile.overrides.css']
            for file in web_files:
                web_path = os.path.join('web', file)
                if os.path.exists(web_path):
                    zipf.write(web_path, file)
                elif os.path.exists(file):
                    zipf.write(file)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É img —Å–æ –≤—Å–µ–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
            if os.path.exists('img'):
                for root, dirs, files in os.walk('img'):
                    for file in files:
                        file_path = os.path.join(root, file)
                        arc_name = os.path.relpath(file_path, '.')
                        zipf.write(file_path, arc_name)
            
            # –°–æ–∑–¥–∞–µ–º TSV —Ñ–∞–π–ª –¥–ª—è —Å–∞–π—Ç–∞
            tsv_lines = ["Section\tTitle\tPrice\tDesc\tMeta\tStatus\tImages\tLink"]
            
            for product in self.products:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—É —Ç–æ–≤–∞—Ä–∞
                section = "home"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if "nessffo" in product.get('desc', '').lower() or "nessffo" in product.get('title', '').lower():
                    section = "nessffo"
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
                folder_path = product.get('folder', '')
                if folder_path.startswith('img/'):
                    folder_name = folder_path[4:]  # –£–±–∏—Ä–∞–µ–º 'img/'
                else:
                    folder_name = os.path.basename(folder_path)
                
                if not folder_name:
                    folder_name = self.clean_filename(product['title'])
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
                if product.get('images'):
                    image_names = product['images'].split('|')
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –æ—Ç –∫–æ—Ä–Ω—è —Å–∞–π—Ç–∞
                    full_images = []
                    for img in image_names:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ —É–∂–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
                        if '/' in img:
                            # –ò–º—è —Ñ–∞–π–ª–∞ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
                            full_images.append(f"img/{img}")
                        else:
                            # –ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É
                            if folder_name:
                                full_images.append(f"img/{folder_name}/{img}")
                            else:
                                full_images.append(f"img/{img}")
                    images_str = "|".join(full_images)
                else:
                    images_str = ""
                
                tsv_line = f"{section}\t{product['title']}\t{product.get('price', '')}\t{product.get('desc', '')}\t{product.get('meta', '')}\t{product.get('status', 'active')}\t{images_str}\thttps://t.me/stub123"
                tsv_lines.append(tsv_line)
            
            tsv_content = "\n".join(tsv_lines)
            zipf.writestr('catalog.tsv', tsv_content)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JavaScript —Ñ–∞–π–ª —Å –ª–æ–∫–∞–ª—å–Ω—ã–º TSV
            try:
                with open(os.path.join('web', 'app.min.js'), 'r', encoding='utf-8') as f:
                    js_content = f.read()
                
                # –ó–∞–º–µ–Ω—è–µ–º URL Google Sheets –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π TSV —Ñ–∞–π–ª
                js_content = js_content.replace(
                    "const SHEET_TSV_URL = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vRGdW7QcHV6BgZHJnSMzXKkmsXDYZulMojN312tgvI6PK86H8dRjReYUOHI2l_aVYzLg2NIjAcir89g/pub?output=tsv';",
                    "const SHEET_TSV_URL = './catalog.tsv';"
                )
                
                zipf.writestr('app.min.js', js_content)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è JS —Ñ–∞–π–ª–∞: {e}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º README —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
            readme_content = f"""# Platforma Site - –î–µ–ø–ª–æ–π –Ω–∞ Netlify

## üì¶ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ö–∏–≤–∞:
- `index.html` - –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
- `app.min.js` - –ª–æ–≥–∏–∫–∞ —Å–∞–π—Ç–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ TSV)
- `styles.min.css` - —Å—Ç–∏–ª–∏
- `mobile.overrides.css` - –º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
- `img/` - –ø–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
- `catalog.tsv` - –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∞ ({len(self.products)} —Ç–æ–≤–∞—Ä–æ–≤)

## üöÄ –î–µ–ø–ª–æ–π –Ω–∞ Netlify:

### –í–∞—Ä–∏–∞–Ω—Ç 1: Drag & Drop
1. –†–∞—Å–ø–∞–∫—É–π—Ç–µ –∞—Ä—Ö–∏–≤
2. –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ –≤ Netlify
3. –°–∞–π—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: https://your-site.netlify.app

### –í–∞—Ä–∏–∞–Ω—Ç 2: Git
1. –†–∞—Å–ø–∞–∫—É–π—Ç–µ –∞—Ä—Ö–∏–≤
2. –°–æ–∑–¥–∞–π—Ç–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫ Netlify

## üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞:
1. –û—Ç–∫—Ä–æ–π—Ç–µ `catalog.tsv` –≤ Google Sheets
2. –í–Ω–µ—Å–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
3. –û–ø—É–±–ª–∏–∫—É–π—Ç–µ –∫–∞–∫ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É
4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ URL –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –≤ `app.min.js`

## ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞:
- –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤–∫–ª—é—á–µ–Ω—ã
- TSV —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {len(self.products)} —Ç–æ–≤–∞—Ä–æ–≤
- JavaScript –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π TSV —Ñ–∞–π–ª
- –°–∞–π—Ç –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é

–°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
            zipf.writestr('README.md', readme_content)
            
            # –î–æ–±–∞–≤–ª—è–µ–º .gitignore –¥–ª—è Netlify
            gitignore_content = """# Netlify
.netlify/
"""
            zipf.writestr('.gitignore', gitignore_content)
        
        messagebox.showinfo("–ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω", 
                          f"‚úÖ –ê—Ä—Ö–∏–≤ –¥–ª—è –¥–µ–ø–ª–æ—è —Å–æ–∑–¥–∞–Ω!\n"
                          f"üì¶ –§–∞–π–ª: {archive_name}\n"
                          f"üìä –¢–æ–≤–∞—Ä–æ–≤: {len(self.products)}\n"
                          f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {sum(len(p.get('images', '').split('|')) for p in self.products)}\n\n"
                          f"üöÄ –ì–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ Netlify!")
    
    def load_products(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists('products.json'):
                with open('products.json', 'r', encoding='utf-8') as f:
                    self.products = json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            self.products = []
    
    def save_products(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            with open('products.json', 'w', encoding='utf-8') as f:
                json.dump(self.products, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")

    # def sync_google_sheets(self):
    #     """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets - –û–¢–ö–õ–Æ–ß–ï–ù–û"""
    #     messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets –æ—Ç–∫–ª—é—á–µ–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ products.json")

    def deploy_to_github(self):
        """–î–µ–ø–ª–æ–π –Ω–∞ GitHub Pages"""
        try:
            import subprocess
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Git
            result = subprocess.run(['git', 'status', '--porcelain'], 
                                  capture_output=True, text=True, encoding='utf-8')
            
            if result.stdout.strip():
                # –ï—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
                response = messagebox.askyesno("–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã", 
                                             "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.\n"
                                             "–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º?")
                if response:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    subprocess.run(['git', 'add', '.'], check=True)
                    
                    # –ö–æ–º–º–∏—Ç–∏–º
                    commit_msg = f"Auto-deploy: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                    subprocess.run(['git', 'commit', '-m', commit_msg], check=True)
                else:
                    messagebox.showinfo("–û—Ç–º–µ–Ω–µ–Ω–æ", "–î–µ–ø–ª–æ–π –æ—Ç–º–µ–Ω–µ–Ω")
                    return
            
            # –ü—É—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            subprocess.run(['git', 'push', 'origin', 'main'], check=True)
            
            messagebox.showinfo("‚úÖ –î–µ–ø–ª–æ–π –∑–∞–ø—É—â–µ–Ω!", 
                              f"üöÄ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ GitHub!\n\n"
                              f"üìä –°—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è:\n"
                              f"   https://github.com/nothingitto-ops/platforma-site-clean/actions\n\n"
                              f"üåê –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä:\n"
                              f"   https://nothingitto-ops.github.io/platforma-site-clean/\n\n"
                              f"üéØ –û—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç:\n"
                              f"   https://platformasluchay.ru\n\n"
                              f"‚è±Ô∏è –î–µ–ø–ª–æ–π –æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã")
                
        except subprocess.CalledProcessError as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è", f"–û—à–∏–±–∫–∞ Git:\n{e}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–ø–ª–æ–π:\n{e}")

def main():
    root = tk.Tk()
    app = ImprovedCatalogApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
