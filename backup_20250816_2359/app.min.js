

// Глобальные переменные
let currentTab = 'home';
let current = null;
let curIndex = 0;
let zoomed = false;
let tx = 0, ty = 0;
let currentHints = [];
let scrollPosition = 0; // Добавляем переменную для сохранения позиции скролла

// DOM элементы
const $modal = document.getElementById('modal');
const $mTitle = document.getElementById('mTitle');
const $mPrice = document.getElementById('mPrice');
const $mDesc = document.getElementById('mDesc');
const $mMeta = document.getElementById('mMeta');
const $mLink = document.getElementById('desktopLink');
const $mStatus = document.getElementById('mStatus');

// Данные товаров
let products = [];

// Загрузка данных из products.json
async function loadProducts() {
  try {
    if (window.loadProductsWithCacheBust) {
      products = await window.loadProductsWithCacheBust();
    } else {
      const response = await fetch('products.json?v=' + new Date().getTime());
      products = await response.json();
    }
    
    // Преобразуем данные в нужный формат
    products = products.map(item => ({
      id: `product_${item.id}`,
      images: item.images.split('|').map(img => img.trim()),
      title: item.title,
      price: item.price,
      desc: item.desc,
      meta: item.meta,
      link: item.link,
      status: item.status,
      order: parseInt(item.order),
      section: item.section
    }));
    
    // Предзагружаем изображения для плавного переключения
    preloadImages();
    
    // Обновляем каталог после загрузки данных
    renderCatalog();
  } catch (error) {
    console.error('Error loading products:', error);
  }
}

// Предзагрузка изображений
function preloadImages() {
  const imagesToPreload = [];
  
  // Добавляем баннеры
  imagesToPreload.push('img/bannerh.jpg', 'img/banner.jpg');
  
  // Добавляем все изображения продуктов
  products.forEach(product => {
    product.images.forEach(image => {
      imagesToPreload.push(`img/${image}`);
    });
  });
  
  // Предзагружаем изображения
  imagesToPreload.forEach(src => {
    const img = new Image();
    img.src = src;
  });
  
}


// Инициализация
document.addEventListener('DOMContentLoaded', () => {
  try {
    // Очищаем класс modal-open при загрузке страницы
    document.body.classList.remove('modal-open');
    document.body.style.overflow = '';
    
    initTabs();
    initFilters();
    initCarePanel();
    initScrollHandler();
    loadProducts(); // Загружаем данные из products.json
    loadHero();
    
    // Принудительно исправляем стили кнопки
    setTimeout(() => {
      const ctaButtons = document.querySelectorAll('.cta, #desktopLink.cta, .mobile-modal .cta');
      ctaButtons.forEach(btn => {
        btn.style.borderRadius = '0';
        btn.style.webkitBorderRadius = '0';
        btn.style.mozBorderRadius = '0';
        btn.style.width = '100vw';
        btn.style.maxWidth = '100vw';
        btn.style.left = '0';
        btn.style.right = '0';
        btn.style.marginLeft = '0';
        btn.style.marginRight = '0';
      });
    }, 100);
    
  } catch (error) {
    console.error('Error during initialization:', error);
  }
});

// Функции для вкладок
function initTabs() {
  const tabs = document.querySelectorAll('.tab');
  tabs.forEach(tab => {
    tab.addEventListener('click', () => {
      const section = tab.dataset.tab;
      switchTab(section);
    });
  });
}

function switchTab(section) {
  currentTab = section;
  
  // Очищаем состояние модалок при переключении вкладок
  closeAllModals();
  
  // Обновляем активную вкладку
  document.querySelectorAll('.tab').forEach(tab => {
    tab.classList.toggle('active', tab.dataset.tab === section);
  });
  
  // Прокручиваем страницу вверх только если не было открытой модалки
  if (scrollPosition === 0) {
    window.scrollTo({ 
      top: 0, 
      behavior: 'instant' // Мгновенная прокрутка без анимации
    });
  }
  
  // Обновляем баннер
  loadHero();
  
  // Быстрая фильтрация каталога
  filterCatalog('all');
  
  // Устанавливаем атрибут data-section для стилей
  document.body.setAttribute('data-section', section);
  
  // Показываем/скрываем панель ухода и кнопку руководства
  const carePanel = document.getElementById('carePanel');
  const careBtn = document.getElementById('careBtn');
  
  if (carePanel) {
    if (section === 'nessffo') {
      // На десктопе панель изначально скрыта, на мобильных - показана
      if (window.innerWidth > 768) {
        carePanel.style.display = 'none';
        carePanel.classList.remove('open');
      } else {
        carePanel.style.display = 'block';
        carePanel.classList.remove('collapsed');
      }
    } else {
      carePanel.style.display = 'none';
      carePanel.classList.remove('open');
    }
  }
  
  // Показываем/скрываем кнопку руководства
  if (careBtn) {
    if (section === 'nessffo' && window.innerWidth > 768) {
      careBtn.style.display = 'flex';
    } else {
      careBtn.style.display = 'none';
    }
  }
}

// Функции для фильтров
function initFilters() {
  const filters = document.querySelectorAll('.fbtn');
  filters.forEach(filter => {
    filter.addEventListener('click', () => {
      const filterType = filter.dataset.filter;
      applyFilter(filterType);
    });
  });
}

function applyFilter(filterType) {
  // Обновляем активный фильтр
  document.querySelectorAll('.fbtn').forEach(btn => {
    btn.classList.toggle('active', btn.dataset.filter === filterType);
  });
  
  // Быстрая фильтрация без пересоздания DOM
  filterCatalog(filterType);
}

// Новая функция для быстрой фильтрации
function filterCatalog(filterType = 'all') {
  const cards = document.querySelectorAll('.card');
  
  cards.forEach(card => {
    const itemId = card.dataset.id;
    const item = products.find(p => p.id === itemId);
    
    if (item) {
      let shouldShow = true;
      
      // Проверяем соответствие текущей вкладке
      if (item.section !== currentTab) {
        shouldShow = false;
      } else {
        // Проверяем фильтр по статусу
        if (filterType === 'stock' && item.status !== 'stock') {
          shouldShow = false;
        } else if (filterType === 'preorder' && item.status !== 'preorder') {
          shouldShow = false;
        }
      }
      
      // Показываем/скрываем карточку
      if (shouldShow) {
        card.style.display = 'block';
        card.style.opacity = '1';
        card.style.visibility = 'visible';
      } else {
        card.style.display = 'none';
        card.style.opacity = '0';
        card.style.visibility = 'hidden';
      }
    }
  });
}

// Функции для панели ухода
function initCarePanel() {
  const carePanel = document.getElementById('carePanel');
  const careBtn = document.getElementById('careBtn');
  
  if (carePanel) {
    // Обработчик для панели (сворачивание при клике на заголовок только на мобильных)
    const careTitle = carePanel.querySelector('h4');
    if (careTitle) {
      careTitle.addEventListener('click', () => {
        if (window.innerWidth <= 768) {
          // Только на мобильных
          carePanel.classList.toggle('collapsed');
        }
      });
    }
  }
  
  // Обработчик для кнопки руководства
  if (careBtn) {
    careBtn.addEventListener('click', () => {
      if (carePanel) {
        carePanel.classList.toggle('open');
      }
    });
  }
}

// Функции для баннера
function loadHero() {
  const hero = document.querySelector('.hero');
  if (hero) {
    const banner = currentTab === 'home' ? 'bannerh.jpg' : 'banner.jpg';
    hero.src = `img/${banner}`;
    hero.alt = currentTab === 'home' ? 'Главная страница' : 'Nessffo Collection';
    hero.style.opacity = '1';
    hero.style.visibility = 'visible';
  } else {
    console.error('Hero element not found');
  }
}

// Функции для каталога
function renderCatalog(filterType = 'all') {
  const catalog = document.getElementById('catalog');
  if (!catalog) return;
  
  // Создаем все карточки сразу для быстрой фильтрации
  const allCards = products.map(item => createCard(item)).join('');
  catalog.innerHTML = allCards;
  
  // Добавляем обработчики событий
  addCardEventListeners();
  
  // Применяем фильтр
  filterCatalog(filterType);
  
  // Показываем каталог
  catalog.style.opacity = '1';
  catalog.style.visibility = 'visible';
  catalog.style.display = 'grid';
}

function createCard(item) {
  const statusText = item.status === 'preorder' ? 'под заказ' : 'в наличии';
  const statusClass = item.status === 'preorder' ? 'pre' : 'in';
  
  // Форматируем цену с пробелами и символом рубля
  const priceText = item.price.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ') + ' ₽';
  
  return `
    <div class="card" data-id="${item.id}">
      <div class="card-img">
        <img src="img/${item.images[0]}" alt="${item.title}" loading="lazy">
      </div>
      <h3>${item.title}</h3>
      <div class="price">${priceText}</div>
      <div class="status ${statusClass}">${statusText}</div>
    </div>
  `;
}

function addCardEventListeners() {
  const cards = document.querySelectorAll('.card');
  cards.forEach(card => {
    const itemId = card.dataset.id;
    const item = products.find(p => p.id === itemId);
    
    if (item) {
      // Обработчик клика
      card.addEventListener('click', () => openModal(item, currentTab));
      
      // Эффект смены изображений при наведении (только для десктопа)
      if (window.innerWidth > 768) {
        const imgBox = card.querySelector('.card-img');
        const img = imgBox.querySelector('img');
        
        if (imgBox && img && item.images.length > 1) {
          let isHovering = false;
          let hoverRaf = 0;
          let currentHoverIndex = 0;
          
          const applyIdx = (idx) => {
            if (idx !== currentHoverIndex && idx < item.images.length) {
              currentHoverIndex = idx;
              img.src = `img/${item.images[idx]}`;
            }
          };
          
          imgBox.addEventListener('mouseenter', () => {
            isHovering = true;
          });
          
          imgBox.addEventListener('mousemove', e => {
            if (!isHovering) return;
            
            if (hoverRaf) {
              cancelAnimationFrame(hoverRaf);
            }
            
            hoverRaf = requestAnimationFrame(() => {
              hoverRaf = 0;
              const rect = imgBox.getBoundingClientRect();
              const ratio = (e.clientX - rect.left) / rect.width;
              const idx = Math.min(item.images.length - 1, Math.max(0, Math.floor(ratio * item.images.length)));
              if (idx !== currentHoverIndex) {
                applyIdx(idx);
              }
            });
          });
          
          imgBox.addEventListener('mouseout', () => {
            isHovering = false;
            if (hoverRaf) {
              cancelAnimationFrame(hoverRaf);
              hoverRaf = 0;
            }
            if (currentHoverIndex !== 0) {
              applyIdx(0);
            }
          });
          
          imgBox.addEventListener('mouseleave', () => {
            isHovering = false;
            if (hoverRaf) {
              cancelAnimationFrame(hoverRaf);
              hoverRaf = 0;
            }
            if (currentHoverIndex !== 0) {
              applyIdx(0);
            }
          });
        }
      }
    }
  });
}

// Функции для модального окна (десктоп)
function openModal(item, section) {
  // Проверяем размер экрана для определения мобильной/десктопной версии
  const isMobile = window.innerWidth <= 768;
  
  if (isMobile) {
    // Для мобильной версии открываем новую модалку
    openMobileModal(item, section);
  } else {
    // Для десктопной версии открываем обычную модалку
    openDesktopModal(item, section);
  }
}

function openDesktopModal(item, section) {
  current = item;
  curIndex = 0;
  
  // Заполняем информацию
  $mTitle.textContent = item.title;
  
  // Форматируем цену
  const priceText = item.price.replace(' ₽', '').replace(' р.', '').replace('р', '');
  const formattedPrice = priceText.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ') + ' ₽';
  
  // Создаем контейнер для цены и статуса
  $mPrice.innerHTML = '';
  const priceContainer = document.createElement('div');
  priceContainer.className = 'modal-price-container';
  priceContainer.style.display = 'flex';
  priceContainer.style.justifyContent = 'center';
  priceContainer.style.alignItems = 'center';
  priceContainer.style.gap = '12px';
  priceContainer.style.flexWrap = 'wrap';
  
  const priceElement = document.createElement('span');
  priceElement.className = 'price-text';
  priceElement.textContent = formattedPrice;
  priceContainer.appendChild(priceElement);
  
  // Добавляем статус
  if (item.status) {
    const statusElement = document.createElement('span');
    const cls = (item.status === 'preorder') ? 'pre' : 'in';
    statusElement.className = 'modal-status ' + cls;
    statusElement.textContent = (item.status === 'preorder') ? 'под заказ' : 'в наличии';
    priceContainer.appendChild(statusElement);
  }
  
  $mPrice.appendChild(priceContainer);
  
  $mDesc.textContent = item.desc;
  $mMeta.textContent = item.meta || '';
  $mLink.href = item.link;
  
  // Устанавливаем изображение
  setMainImage(item.images[0]);
  renderThumbnails(item.images);
  
  // Добавляем обработчики для десктопной версии
  setupDesktopModalHandlers();
  
  // Открываем модалку
  $modal.classList.add('open');
  document.body.style.overflow = 'hidden';
}

function setMainImage(src) {
  const viewerImg = document.getElementById('viewerImg');
  if (viewerImg) {
    viewerImg.src = `img/${src}`;
  }
  
  // Добавляем обработчики кликов для листания фото
  const viewer = document.querySelector('.viewer');
  if (viewer && current) {
    // Удаляем старые обработчики
    viewer.removeEventListener('click', handleViewerClick);
    // Добавляем новый обработчик
    viewer.addEventListener('click', handleViewerClick);
  }
}

function handleViewerClick(e) {
  if (!current || current.images.length <= 1) return;
  
  const rect = e.currentTarget.getBoundingClientRect();
  const x = e.clientX - rect.left;
  const width = rect.width;
  
  // Если клик в левой трети - предыдущее фото
  if (x < width / 3) {
    curIndex = (curIndex - 1 + current.images.length) % current.images.length;
    setMainImage(current.images[curIndex]);
    updateThumbnails();
  }
  // Если клик в правой трети - следующее фото
  else if (x > (width * 2) / 3) {
    curIndex = (curIndex + 1) % current.images.length;
    setMainImage(current.images[curIndex]);
    updateThumbnails();
  }
}

function handleMobileViewerClick(e) {
  if (!current || current.images.length <= 1) return;
  
  const rect = e.currentTarget.getBoundingClientRect();
  const x = e.clientX - rect.left;
  const width = rect.width;
  
  // Если клик в левой трети - предыдущее фото
  if (x < width / 3) {
    curIndex = (curIndex - 1 + current.images.length) % current.images.length;
    const mobileMainImg = document.getElementById('mobileMainImg');
    if (mobileMainImg) {
      mobileMainImg.src = `img/${current.images[curIndex]}`;
    }
    updateMobileDots();
  }
  // Если клик в правой трети - следующее фото
  else if (x > (width * 2) / 3) {
    curIndex = (curIndex + 1) % current.images.length;
    const mobileMainImg = document.getElementById('mobileMainImg');
    if (mobileMainImg) {
      mobileMainImg.src = `img/${current.images[curIndex]}`;
    }
    updateMobileDots();
  }
}

function handleMobileZoomClick(e) {
  if (!current || current.images.length <= 1) return;
  
  const rect = e.currentTarget.getBoundingClientRect();
  const x = e.clientX - rect.left;
  const width = rect.width;
  
  // Если клик в левой трети - предыдущее фото
  if (x < width / 3) {
    curIndex = (curIndex - 1 + current.images.length) % current.images.length;
    const mobileMainImg = document.getElementById('mobileMainImg');
    const mobileZoomImg = document.getElementById('mobileZoomImg');
    if (mobileMainImg) {
      mobileMainImg.src = `img/${current.images[curIndex]}`;
    }
    if (mobileZoomImg) {
      mobileZoomImg.src = `img/${current.images[curIndex]}`;
    }
    updateMobileDots();
    updateZoomDots();
  }
  // Если клик в правой трети - следующее фото
  else if (x > (width * 2) / 3) {
    curIndex = (curIndex + 1) % current.images.length;
    const mobileMainImg = document.getElementById('mobileMainImg');
    const mobileZoomImg = document.getElementById('mobileZoomImg');
    if (mobileMainImg) {
      mobileMainImg.src = `img/${current.images[curIndex]}`;
    }
    if (mobileZoomImg) {
      mobileZoomImg.src = `img/${current.images[curIndex]}`;
    }
    updateMobileDots();
    updateZoomDots();
  }
}

function renderThumbnails(images) {
  const thumbs = document.getElementById('thumbs');
  if (!thumbs) return;
  
  thumbs.innerHTML = '';
  images.forEach((imagePath, idx) => {
    const thumb = document.createElement('img');
    thumb.src = `img/${imagePath}`;
    thumb.alt = '';
    thumb.className = `thumb ${idx === 0 ? 'active' : ''}`;
    thumb.addEventListener('click', () => {
      curIndex = idx;
      setMainImage(imagePath);
      updateThumbnails();
    });
    thumbs.appendChild(thumb);
  });
}

function updateThumbnails() {
  const thumbs = document.querySelectorAll('#thumbs .thumb');
  thumbs.forEach((thumb, idx) => {
    thumb.classList.toggle('active', idx === curIndex);
  });
}

function closeModal() {
  $modal.classList.remove('open');
  document.body.style.overflow = '';
}

// Обработчики событий для десктопной модалки
if ($modal) {
  $modal.addEventListener('click', closeModal);
}

const closeBtn = document.getElementById('closeBtn');
if (closeBtn) {
  closeBtn.addEventListener('click', closeModal);
}

// ===== ФУНКЦИИ ДЛЯ МОБИЛЬНОЙ МОДАЛКИ =====
function openMobileModal(item, section) {
  current = item;
  curIndex = 0;
  
  // Находим элементы мобильной модалки
  const mobileModal = document.getElementById('mobileModal');
  const mobileTitle = document.getElementById('mobileTitle');
  const mobilePrice = document.getElementById('mobilePrice');
  const mobileDesc = document.getElementById('mobileDesc');

  const mobileMainImg = document.getElementById('mobileMainImg');
  const mobileDots = document.getElementById('mobileDots');
  const mobileLink = document.getElementById('mobileLink');
  
  if (!mobileModal || !mobileTitle || !mobilePrice || !mobileDesc || !mobileMainImg || !mobileDots || !mobileLink) {
    console.error('Не найдены элементы мобильной модалки');
    return;
  }
  
  // Заполняем информацию о товаре
  mobileTitle.textContent = item.title;
  
  // Форматируем цену и добавляем статус
  const priceText = item.price.replace(' ₽', '').replace(' р.', '').replace('р', '');
  const formattedPrice = priceText.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ') + ' ₽';
  
  // Очищаем контейнер цены
  mobilePrice.innerHTML = '';
  
  // Добавляем цену
  const priceElement = document.createElement('span');
  priceElement.textContent = formattedPrice;
  priceElement.className = 'mobile-price-text';
  mobilePrice.appendChild(priceElement);
  
  // Добавляем статус рядом с ценой
    if (item.status) {
    const statusElement = document.createElement('span');
    const statusLabel = (item.status === 'preorder') ? 'под заказ' : 'в наличии';
    statusElement.textContent = ' ' + statusLabel;
    statusElement.style.marginLeft = '8px';
    statusElement.style.padding = '2px 6px';
    statusElement.style.borderRadius = '4px';
    statusElement.style.fontSize = '12px';
    statusElement.style.fontWeight = '500';
    statusElement.style.color = item.status === 'preorder' ? '#92400e' : '#065f46';
    statusElement.style.backgroundColor = item.status === 'preorder' ? '#fef3c7' : '#f0fdf4';
    statusElement.style.opacity = '0.8';
    statusElement.style.verticalAlign = 'middle';
    statusElement.style.display = 'inline-block';
    mobilePrice.appendChild(statusElement);
  }
  
  mobileDesc.textContent = item.desc;
  
  // Настройка кнопки "Состав"
  const mobileCompositionBtn = document.getElementById('mobileCompositionBtn');
  if (mobileCompositionBtn) {
    mobileCompositionBtn.addEventListener('click', function() {
      if (this.classList.contains('active')) {
        // Показываем описание
        this.classList.remove('active');
        this.textContent = '?';
        mobileDesc.textContent = item.desc;
      } else {
        // Показываем состав
        this.classList.add('active');
        this.textContent = '?';
        mobileDesc.textContent = item.meta;
      }
    });
  }
  

  mobileLink.href = item.link;
  
  // Устанавливаем первое изображение
  mobileMainImg.src = `img/${item.images[0]}`;
  mobileMainImg.alt = item.title;
  
  // Добавляем обработчик тапа по изображению для зума
  const mobileMainImage = document.querySelector('.mobile-main-image');
  if (mobileMainImage) {
    mobileMainImage.removeEventListener('click', handleMobileViewerClick);
    mobileMainImage.removeEventListener('click', openMobileZoom);
    mobileMainImage.addEventListener('click', (e) => {
      // Проверяем, что клик не по кнопке закрытия
      if (e.target.closest('.mobile-close-btn')) {
        return; // Не открываем зум если клик по крестику
      }
      openMobileZoom(e);
    });
    
    // Добавляем обработчики для предотвращения нежелательных свайпов
    let touchStartY = 0;
    let touchStartTime = 0;
    
    mobileMainImage.addEventListener('touchstart', (e) => {
      touchStartY = e.touches[0].clientY;
      touchStartTime = Date.now();
    }, { passive: true });
    
    mobileMainImage.addEventListener('touchmove', (e) => {
      // Предотвращаем вертикальные свайпы, которые могут закрыть модалку
      const touchY = e.touches[0].clientY;
      const deltaY = Math.abs(touchY - touchStartY);
      
      // Уменьшаем порог с 10 до 5 пикселей для более строгого контроля
      if (deltaY > 5) {
        e.preventDefault();
        e.stopPropagation();
      }
    }, { passive: false });
    
    mobileMainImage.addEventListener('touchend', (e) => {
      const touchEndY = e.changedTouches[0].clientY;
      const deltaY = Math.abs(touchEndY - touchStartY);
      const deltaTime = Date.now() - touchStartTime;
      
      // Если это быстрый вертикальный свайп вверх, предотвращаем закрытие
      if (deltaY > 50 && deltaTime < 300 && touchEndY < touchStartY) {
        e.preventDefault();
        e.stopPropagation();
      }
    }, { passive: false });
    
    // Добавляем обработчики свайпов для листания изображений
    let touchStartX = 0;
    let touchStartTimeSwipe = 0;
    
    mobileMainImage.addEventListener('touchstart', (e) => {
      if (e.touches.length === 1) {
        touchStartX = e.touches[0].clientX;
        touchStartTimeSwipe = Date.now();
      }
    }, { passive: true });
    
    mobileMainImage.addEventListener('touchend', (e) => {
      if (e.changedTouches.length === 1 && current && current.images.length > 1) {
        const touchEndX = e.changedTouches[0].clientX;
        const touchEndTime = Date.now();
        
        const deltaX = touchStartX - touchEndX;
        const deltaTime = touchEndTime - touchStartTimeSwipe;
        
        // Проверяем, что это быстрый горизонтальный свайп
        if (Math.abs(deltaX) > 50 && deltaTime < 300) {
          if (deltaX > 0) {
            // Свайп влево - следующее изображение
            curIndex = (curIndex + 1) % current.images.length;
          } else {
            // Свайп вправо - предыдущее изображение
            curIndex = (curIndex - 1 + current.images.length) % current.images.length;
          }
          
          const mobileMainImg = document.getElementById('mobileMainImg');
          if (mobileMainImg) {
            mobileMainImg.src = `img/${current.images[curIndex]}`;
          }
          updateMobileDots();
        }
      }
    }, { passive: false });
  }
  
  // Создаем точки для навигации по изображениям
  mobileDots.innerHTML = '';
  if (item.images.length > 1) {
    item.images.forEach((imagePath, idx) => {
      const dot = document.createElement('button');
      dot.className = `mobile-dot ${idx === curIndex ? 'active' : ''}`;
      dot.setAttribute('data-index', idx);
      
      dot.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        if (curIndex !== idx) {
          curIndex = idx;
          mobileMainImg.src = `img/${item.images[idx]}`;
          updateMobileDots();
        }
      });
      
      mobileDots.appendChild(dot);
    });
  }
  
  // Обновляем точки после создания
  updateMobileDots();
  
  // Открываем модалку
  mobileModal.classList.add('open');
  scrollPosition = window.pageYOffset; // Сохраняем позицию скролла
  document.body.style.overflow = 'hidden';
  document.body.classList.add('modal-open'); // Добавляем класс для блокировки каталога
  
  // Добавляем обработчики событий
  addMobileEventHandlers();
}

function updateMobileDots() {
  const dots = document.querySelectorAll('.mobile-dot');
  dots.forEach((dot, idx) => {
    const dataIndex = parseInt(dot.getAttribute('data-index'));
    dot.classList.toggle('active', dataIndex === curIndex);
  });
}

function closeMobileModal() {
  closeAllModals();
}

function addMobileEventHandlers() {
  const mobileCloseBtn = document.getElementById('mobileCloseBtn');
  const mobileModal = document.getElementById('mobileModal');
  const mobileInfoBlock = document.querySelector('.mobile-info-block');
  
  if (mobileCloseBtn) {
    mobileCloseBtn.removeEventListener('click', closeMobileModal);
    mobileCloseBtn.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      closeMobileModal();
    });
  }
  
  // Добавляем обработчик клавиши Escape
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      closeAllModals();
    }
  });
  
  // Добавляем обработчики для текстового блока чтобы предотвратить закрытие карточки
  if (mobileInfoBlock) {
    let touchStartY = 0;
    let touchStartTime = 0;
    
    mobileInfoBlock.addEventListener('touchstart', (e) => {
      touchStartY = e.touches[0].clientY;
      touchStartTime = Date.now();
    }, { passive: true });
    
    mobileInfoBlock.addEventListener('touchmove', (e) => {
      // Предотвращаем вертикальные свайпы на текстовом блоке
      const touchY = e.touches[0].clientY;
      const deltaY = Math.abs(touchY - touchStartY);
      
      if (deltaY > 5) {
        e.preventDefault();
        e.stopPropagation();
      }
    }, { passive: false });
    
    mobileInfoBlock.addEventListener('touchend', (e) => {
      const touchEndY = e.changedTouches[0].clientY;
      const deltaY = Math.abs(touchEndY - touchStartY);
      const deltaTime = Date.now() - touchStartTime;
      
      // Если это быстрый вертикальный свайп, предотвращаем закрытие
      if (deltaY > 50 && deltaTime < 300) {
        e.preventDefault();
        e.stopPropagation();
      }
    }, { passive: false });
  }
  
  // Добавляем обработчики для кнопки CTA
  const mobileCta = document.getElementById('mobileLink');
  if (mobileCta) {
    let touchStartY = 0;
    let touchStartTime = 0;
    
    mobileCta.addEventListener('touchstart', (e) => {
      touchStartY = e.touches[0].clientY;
      touchStartTime = Date.now();
    }, { passive: true });
    
    mobileCta.addEventListener('touchmove', (e) => {
      // Предотвращаем вертикальные свайпы на кнопке
      const touchY = e.touches[0].clientY;
      const deltaY = Math.abs(touchY - touchStartY);
      
      if (deltaY > 5) {
        e.preventDefault();
        e.stopPropagation();
      }
    }, { passive: false });
    
    mobileCta.addEventListener('touchend', (e) => {
      const touchEndY = e.changedTouches[0].clientY;
      const deltaY = Math.abs(touchEndY - touchStartY);
      const deltaTime = Date.now() - touchStartTime;
      
      // Если это быстрый вертикальный свайп, предотвращаем закрытие
      if (deltaY > 50 && deltaTime < 300) {
        e.preventDefault();
        e.stopPropagation();
      }
    }, { passive: false });
  }
}

function removeMobileEventHandlers() {
  const mobileCloseBtn = document.getElementById('mobileCloseBtn');
  const mobileZoomBtn = document.getElementById('mobileZoomBtn');
  const mobileModal = document.getElementById('mobileModal');
  
  if (mobileCloseBtn) {
    mobileCloseBtn.removeEventListener('click', closeMobileModal);
  }
  
  if (mobileZoomBtn) {
    mobileZoomBtn.removeEventListener('click', openMobileZoom);
  }
  
  if (mobileModal) {
    // Убираем обработчики закрытия по клику на фон
    // mobileModal.removeEventListener('click', (e) => {
    //   if (e.target === mobileModal) closeMobileModal();
    // });
  }
}

// ===== ФУНКЦИИ ДЛЯ ЗУМА В МОБИЛЬНОЙ МОДАЛКЕ =====
function openMobileZoom() {
  const mobileZoomModal = document.getElementById('mobileZoomModal');
  const mobileZoomImg = document.getElementById('mobileZoomImg');
  const mobileMainImg = document.getElementById('mobileMainImg');
  
  if (!mobileZoomModal || !mobileZoomImg || !mobileMainImg) return;
  
  // Копируем текущее изображение в зум модалку
  mobileZoomImg.src = mobileMainImg.src;
  mobileZoomImg.alt = '';
  
  // Убираем закругления
  mobileZoomImg.style.borderRadius = '0';
  
  // Создаем точки для зум модалки
  const zoomDotsContainer = document.getElementById('mobileZoomDots');
  if (zoomDotsContainer && current && current.images.length > 1) {
    zoomDotsContainer.innerHTML = '';
    current.images.forEach((imagePath, idx) => {
      const dot = document.createElement('button');
      dot.className = `mobile-zoom-dot ${idx === curIndex ? 'active' : ''}`;
      dot.setAttribute('data-index', idx);
      
      dot.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        if (curIndex !== idx) {
          curIndex = idx;
          const mobileMainImg = document.getElementById('mobileMainImg');
          if (mobileMainImg) {
            mobileMainImg.src = `img/${current.images[idx]}`;
          }
          mobileZoomImg.src = `img/${current.images[idx]}`;
          updateZoomDots();
          updateMobileDots();
        }
      });
      
      zoomDotsContainer.appendChild(dot);
    });
    
    // Обновляем точки после создания
    updateZoomDots();
  }
  
  mobileZoomModal.classList.add('open');
  document.body.style.overflow = 'hidden';
  addMobileZoomEventHandlers();
  
  // Добавляем обработчики кликов для листания фото в зум-модалке
  const mobileZoomContent = document.querySelector('.mobile-zoom-content');
  if (mobileZoomContent) {
    mobileZoomContent.removeEventListener('click', handleMobileZoomClick);
    mobileZoomContent.addEventListener('click', handleMobileZoomClick);
    
    // Добавляем обработчики для предотвращения случайного закрытия зум-модалки
    mobileZoomContent.addEventListener('touchstart', (e) => {
      // Предотвращаем случайные свайпы, которые могут закрыть модалку
      e.stopPropagation();
    }, { passive: true });
    
    mobileZoomContent.addEventListener('touchmove', (e) => {
      // Предотвращаем случайные свайпы, которые могут закрыть модалку
      e.stopPropagation();
    }, { passive: true });
  }
}

function updateZoomDots() {
  const dots = document.querySelectorAll('.mobile-zoom-dot');
  dots.forEach((dot, idx) => {
    const dataIndex = parseInt(dot.getAttribute('data-index'));
    dot.classList.toggle('active', dataIndex === curIndex);
  });
}

function closeMobileZoom() {
  const mobileZoomModal = document.getElementById('mobileZoomModal');
  if (mobileZoomModal) {
    mobileZoomModal.classList.remove('open');
    // Возвращаемся в обычную модалку, не закрываем все
    document.body.style.overflow = 'hidden';
  }
}

function addMobileZoomEventHandlers() {
  const mobileZoomCloseBtn = document.getElementById('mobileZoomCloseBtn');
  const mobileZoomImg = document.getElementById('mobileZoomImg');
  
  if (mobileZoomCloseBtn) {
    mobileZoomCloseBtn.removeEventListener('click', closeMobileZoom);
    mobileZoomCloseBtn.addEventListener('click', closeMobileZoom);
  }
  
  if (mobileZoomImg) {
    // Добавляем поддержку свайпов для смены изображений
    let touchStartX = 0;
    let touchStartY = 0;
    let touchStartTime = 0;
    let isZooming = false;
    
    mobileZoomImg.addEventListener('touchstart', (e) => {
      if (e.touches.length === 1) {
        touchStartX = e.touches[0].clientX;
        touchStartY = e.touches[0].clientY;
        touchStartTime = Date.now();
        isZooming = false;
      } else if (e.touches.length === 2) {
        // Два пальца - это зум, разрешаем его
        isZooming = true;
        // НЕ предотвращаем зум - разрешаем его
      }
    }, { passive: true }); // Изменяем на passive: true для зума
    
    mobileZoomImg.addEventListener('touchmove', (e) => {
      if (e.touches.length === 2) {
        // Два пальца - это зум, разрешаем его
        isZooming = true;
        // НЕ предотвращаем зум - разрешаем его
      }
    }, { passive: true }); // Изменяем на passive: true для зума
    
    mobileZoomImg.addEventListener('touchend', (e) => {
      if (isZooming) {
        e.preventDefault(); // Предотвращаем закрытие при зуме
        return; // Пропускаем если был зум
      }
      
      if (e.changedTouches.length === 1 && current && current.images.length > 1) {
        const touchEndX = e.changedTouches[0].clientX;
        const touchEndY = e.changedTouches[0].clientY;
        const touchEndTime = Date.now();
        
        const deltaX = touchStartX - touchEndX;
        const deltaY = touchStartY - touchEndY;
        const deltaTime = touchEndTime - touchStartTime;
        
        // Проверяем, что это быстрый горизонтальный свайп (не зум)
        if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 50 && deltaTime < 300) {
          if (deltaX > 0) {
            // Свайп влево - следующее изображение
            curIndex = (curIndex + 1) % current.images.length;
          } else {
            // Свайп вправо - предыдущее изображение
            curIndex = (curIndex - 1 + current.images.length) % current.images.length;
          }
          
          const mobileMainImg = document.getElementById('mobileMainImg');
          if (mobileMainImg) {
            mobileMainImg.src = `img/${current.images[curIndex]}`;
          }
          mobileZoomImg.src = `img/${current.images[curIndex]}`;
          updateZoomDots();
          updateMobileDots();
        }
      }
    }, { passive: false });
  }
}

// Обработчик изменения размера окна
window.addEventListener('resize', () => {
  // Закрываем все модалки при изменении размера
  closeModal();
  closeMobileModal();
  closeMobileZoom();
  
  // Обновляем видимость кнопки руководства
  const careBtn = document.getElementById('careBtn');
  const carePanel = document.getElementById('carePanel');
  
  if (careBtn && carePanel) {
    if (currentTab === 'nessffo' && window.innerWidth > 768) {
      careBtn.style.display = 'flex';
    } else {
      careBtn.style.display = 'none';
      carePanel.classList.remove('open');
    }
  }
});

// Функция для обработки скролла и фиксации навигации
function initScrollHandler() {
    const topnav = document.querySelector('.topnav');
  
  if (!topnav) {
    console.error('Topnav element not found!');
    return;
  }
  
  function handleScroll() {
    if (window.scrollY > 8) {
        topnav.classList.add('scrolled');
      } else {
        topnav.classList.remove('scrolled');
      }
    }
  
  // Добавляем обработчик скролла
  window.addEventListener('scroll', handleScroll, { passive: true });
  
  // Вызываем сразу для правильного состояния
  handleScroll();
}

// Функция для настройки обработчиков десктопной модалки
function setupDesktopModalHandlers() {
  const modalLeft = document.getElementById('modalLeft');
  const zoomBtn = document.getElementById('zoomBtn');
  
  // Обработчик клика по основному фото для листания
  if (modalLeft) {
    modalLeft.removeEventListener('click', handleDesktopViewerClick);
    modalLeft.addEventListener('click', handleDesktopViewerClick);
  }
  
  // Обработчик кнопки увеличения
  if (zoomBtn) {
    zoomBtn.removeEventListener('click', handleDesktopZoom);
    zoomBtn.addEventListener('click', handleDesktopZoom);
    
    // Добавляем дополнительные обработчики для отладки
    zoomBtn.addEventListener('mousedown', (e) => {
    });
    
    zoomBtn.addEventListener('mouseup', (e) => {
    });
    
  } else {
    console.error('zoomBtn not found!');
  }
}

// Обработчик клика по основному фото в десктопной версии
function handleDesktopViewerClick(e) {
  if (!current || current.images.length <= 1) return;
  
  // Игнорируем клик по кнопке увеличения
  if (e.target.closest('.zoom-btn')) return;
  
  const modalLeft = e.currentTarget;
  
  // Если в режиме увеличения
  if (modalLeft.classList.contains('zoomed')) {
    // Проверяем, был ли клик по краям экрана для перелистывания
    const windowWidth = window.innerWidth;
    const clickX = e.clientX;
    
    // Если клик в левой четверти экрана - предыдущее фото
    if (clickX < windowWidth / 4) {
      curIndex = (curIndex - 1 + current.images.length) % current.images.length;
      setMainImage(current.images[curIndex]);
      updateThumbnails();
      return;
    }
    // Если клик в правой четверти экрана - следующее фото
    else if (clickX > (windowWidth * 3) / 4) {
      curIndex = (curIndex + 1) % current.images.length;
      setMainImage(current.images[curIndex]);
      updateThumbnails();
      return;
    }
    // Если клик в центре - выходим из режима увеличения
    else {
      handleDesktopZoom();
      return;
    }
  }
  
  // Обычный режим (не увеличенный)
  const rect = modalLeft.getBoundingClientRect();
  const x = e.clientX - rect.left;
  const width = rect.width;
  
  // Если клик в левой трети - предыдущее фото
  if (x < width / 3) {
    curIndex = (curIndex - 1 + current.images.length) % current.images.length;
    setMainImage(current.images[curIndex]);
    updateThumbnails();
  }
  // Если клик в правой трети - следующее фото
  else if (x > (width * 2) / 3) {
    curIndex = (curIndex + 1) % current.images.length;
    setMainImage(current.images[curIndex]);
    updateThumbnails();
  }
}

// Обработчик увеличения в десктопной версии
function handleDesktopZoom() {
  if (!current) {
    return;
  }
  
  // Простое увеличение изображения в том же модальном окне
  const mainImg = document.getElementById('viewerImg');
  const modalLeft = document.getElementById('modalLeft');
  const zoomBtn = document.getElementById('zoomBtn');
  
  if (mainImg && modalLeft) {
    // Переключаем режим увеличения
    if (modalLeft.classList.contains('zoomed')) {
      // Возвращаем к нормальному размеру
      modalLeft.classList.remove('zoomed');
      zoomBtn.innerHTML = `
        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <circle cx="11" cy="11" r="8"></circle>
          <path d="m21 21-4.35-4.35"></path>
          <line x1="11" y1="8" x2="11" y2="14"></line>
          <line x1="8" y1="11" x2="14" y2="11"></line>
        </svg>
      `;
      
      // Удаляем обработчик ESC
      document.removeEventListener('keydown', handleEscKey);
      
    } else {
      // Включаем увеличение
      modalLeft.classList.add('zoomed');
      zoomBtn.innerHTML = `
        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      `;
      
      // Добавляем обработчик ESC
      document.addEventListener('keydown', handleEscKey);
      
    }
  } else {
    console.error('Failed to find image elements');
  }
}

// Обработчик клавиши ESC
function handleEscKey(e) {
  if (e.key === 'Escape') {
    const modalLeft = document.getElementById('modalLeft');
    const zoomBtn = document.getElementById('zoomBtn');
    
    if (modalLeft && modalLeft.classList.contains('zoomed')) {
      modalLeft.classList.remove('zoomed');
      zoomBtn.innerHTML = `
        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <circle cx="11" cy="11" r="8"></circle>
          <path d="m21 21-4.35-4.35"></path>
          <line x1="11" y1="8" x2="11" y2="14"></line>
          <line x1="8" y1="11" x2="14" y2="11"></line>
        </svg>
      `;
      
      // Удаляем обработчик ESC
      document.removeEventListener('keydown', handleEscKey);
      
    }
  }
}

function closeAllModals() {
  const mobileModal = document.getElementById('mobileModal');
  const mobileZoomModal = document.getElementById('mobileZoomModal');
  
  if (mobileModal) {
    mobileModal.classList.remove('open');
  }
  
  if (mobileZoomModal) {
    mobileZoomModal.classList.remove('open');
  }
  
  document.body.style.overflow = '';
  document.body.classList.remove('modal-open'); // Полностью разблокируем каталог
  
  // Восстанавливаем позицию скролла мгновенно
  if (scrollPosition > 0) {
    window.scrollTo({
      top: scrollPosition,
      behavior: 'instant' // Мгновенное восстановление без анимации
    });
    scrollPosition = 0; // Сбрасываем сохраненную позицию
  }
  
  removeMobileEventHandlers();
}
